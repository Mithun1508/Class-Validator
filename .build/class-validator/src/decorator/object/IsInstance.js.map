{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/object/IsInstance.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_INSTANCE = 'isInstance';\n\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function isInstance(object: unknown, targetTypeConstructor: new (...args: any[]) => any): boolean {\n  return (\n    targetTypeConstructor && typeof targetTypeConstructor === 'function' && object instanceof targetTypeConstructor\n  );\n}\n\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function IsInstance(\n  targetType: new (...args: any[]) => any,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_INSTANCE,\n      constraints: [targetType],\n      validator: {\n        validate: (value, args): boolean => isInstance(value, args.constraints[0]),\n        defaultMessage: buildMessage((eachPrefix, args) => {\n          if (args.constraints[0]) {\n            return eachPrefix + `$property must be an instance of ${args.constraints[0].name as string}`;\n          } else {\n            return eachPrefix + `${IS_INSTANCE} decorator expects and object as value, but got falsy value.`;\n          }\n        }, validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AAElC,MAAM,cAAc;AAKpB,SAAS,WAAW,QAAiB,uBAA6D;AACvG,SACE,yBAAyB,OAAO,0BAA0B,cAAc,kBAAkB;AAE9F;AAKO,SAAS,WACd,YACA,mBACmB;AACnB,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,UAAU;AAAA,MACxB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,WAAW,OAAO,KAAK,YAAY,EAAE;AAAA,QACzE,oBAAgB,gCAAa,CAAC,YAAY,SAAS;AACjD,cAAI,KAAK,YAAY,IAAI;AACvB,mBAAO,aAAa,oCAAoC,KAAK,YAAY,GAAG;AAAA,UAC9E,OAAO;AACL,mBAAO,aAAa,GAAG;AAAA,UACzB;AAAA,QACF,GAAG,iBAAiB;AAAA,MACtB;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
