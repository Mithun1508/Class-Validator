{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/typechecker/IsNumber.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_NUMBER = 'isNumber';\n\n/**\n * Options to be passed to IsNumber decorator.\n */\nexport interface IsNumberOptions {\n  allowNaN?: boolean;\n  allowInfinity?: boolean;\n  maxDecimalPlaces?: number;\n}\n\n/**\n * Checks if a given value is a number.\n */\nexport function isNumber(value: unknown, options: IsNumberOptions = {}): boolean {\n  if (typeof value !== 'number') {\n    return false;\n  }\n\n  if (value === Infinity || value === -Infinity) {\n    return options.allowInfinity;\n  }\n\n  if (Number.isNaN(value)) {\n    return options.allowNaN;\n  }\n\n  if (options.maxDecimalPlaces !== undefined) {\n    let decimalPlaces = 0;\n    if (value % 1 !== 0) {\n      decimalPlaces = value.toString().split('.')[1].length;\n    }\n    if (decimalPlaces > options.maxDecimalPlaces) {\n      return false;\n    }\n  }\n\n  return Number.isFinite(value);\n}\n\n/**\n * Checks if a value is a number.\n */\nexport function IsNumber(options: IsNumberOptions = {}, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NUMBER,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isNumber(value, args.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a number conforming to the specified constraints',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AAElC,MAAM,YAAY;AAclB,SAAS,SAAS,OAAgB,UAA2B,CAAC,GAAY;AAC/E,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO;AAAA,EACT;AAEA,MAAI,UAAU,YAAY,UAAU,WAAW;AAC7C,WAAO,QAAQ;AAAA,EACjB;AAEA,MAAI,OAAO,MAAM,KAAK,GAAG;AACvB,WAAO,QAAQ;AAAA,EACjB;AAEA,MAAI,QAAQ,qBAAqB,QAAW;AAC1C,QAAI,gBAAgB;AACpB,QAAI,QAAQ,MAAM,GAAG;AACnB,sBAAgB,MAAM,SAAS,EAAE,MAAM,GAAG,EAAE,GAAG;AAAA,IACjD;AACA,QAAI,gBAAgB,QAAQ,kBAAkB;AAC5C,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO,OAAO,SAAS,KAAK;AAC9B;AAKO,SAAS,SAAS,UAA2B,CAAC,GAAG,mBAA0D;AAChH,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,OAAO;AAAA,MACrB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,SAAS,OAAO,KAAK,YAAY,EAAE;AAAA,QACvE,oBAAgB;AAAA,UACd,gBAAc,aAAa;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
