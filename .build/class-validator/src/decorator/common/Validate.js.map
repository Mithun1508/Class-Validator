{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/common/Validate.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ConstraintMetadata } from '../../metadata/ConstraintMetadata';\n\n/**\n * Registers custom validator class.\n */\nexport function ValidatorConstraint(options?: { name?: string; async?: boolean }) {\n  return function (target: Function): void {\n    const isAsync = options && options.async;\n    let name = options && options.name ? options.name : '';\n    if (!name) {\n      name = (target as any).name;\n      if (!name)\n        // generate name if it was not given\n        name = name.replace(/\\.?([A-Z]+)/g, (x, y) => '_' + (y as string).toLowerCase()).replace(/^_/, '');\n    }\n    const metadata = new ConstraintMetadata(target, name, isAsync);\n    getMetadataStorage().addConstraintMetadata(metadata);\n  };\n}\n\n/**\n * Performs validation based on the given custom validation class.\n * Validation class must be decorated with ValidatorConstraint decorator.\n */\nexport function Validate(constraintClass: Function, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Validate(\n  constraintClass: Function,\n  constraints?: any[],\n  validationOptions?: ValidationOptions\n): PropertyDecorator;\nexport function Validate(\n  constraintClass: Function,\n  constraintsOrValidationOptions?: any[] | ValidationOptions,\n  maybeValidationOptions?: ValidationOptions\n): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.CUSTOM_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraintCls: constraintClass,\n      constraints: constraintsOrValidationOptions instanceof Array ? constraintsOrValidationOptions : undefined,\n      validationOptions: !(constraintsOrValidationOptions instanceof Array)\n        ? constraintsOrValidationOptions\n        : maybeValidationOptions,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,gCAAmC;AACnC,6BAAmC;AACnC,6BAAgC;AAChC,gCAAmC;AAK5B,SAAS,oBAAoB,SAA8C;AAChF,SAAO,SAAU,QAAwB;AACvC,UAAM,UAAU,WAAW,QAAQ;AACnC,QAAI,OAAO,WAAW,QAAQ,OAAO,QAAQ,OAAO;AACpD,QAAI,CAAC,MAAM;AACT,aAAQ,OAAe;AACvB,UAAI,CAAC;AAEH,eAAO,KAAK,QAAQ,gBAAgB,CAAC,GAAG,MAAM,MAAO,EAAa,YAAY,CAAC,EAAE,QAAQ,MAAM,EAAE;AAAA,IACrG;AACA,UAAM,WAAW,IAAI,6CAAmB,QAAQ,MAAM,OAAO;AAC7D,mDAAmB,EAAE,sBAAsB,QAAQ;AAAA,EACrD;AACF;AAYO,SAAS,SACd,iBACA,gCACA,wBACmB;AACnB,SAAO,SAAU,QAAgB,cAA4B;AAC3D,UAAM,OAA+B;AAAA,MACnC,MAAM,uCAAgB;AAAA,MACtB,QAAQ,OAAO;AAAA,MACf;AAAA,MACA,eAAe;AAAA,MACf,aAAa,0CAA0C,QAAQ,iCAAiC;AAAA,MAChG,mBAAmB,EAAE,0CAA0C,SAC3D,iCACA;AAAA,IACN;AACA,mDAAmB,EAAE,sBAAsB,IAAI,6CAAmB,IAAI,CAAC;AAAA,EACzE;AACF;",
  "names": []
}
