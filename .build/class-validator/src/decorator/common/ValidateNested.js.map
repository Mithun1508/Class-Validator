{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/common/ValidateNested.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n\n/**\n * Objects / object arrays marked with this decorator will also be validated.\n */\nexport function ValidateNested(validationOptions?: ValidationOptions): PropertyDecorator {\n  const opts: ValidationOptions = { ...validationOptions };\n  const eachPrefix = opts.each ? 'each value in ' : '';\n  opts.message = opts.message || eachPrefix + 'nested property $property must be either object or array';\n\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.NESTED_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: opts,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,6BAAgC;AAChC,gCAAmC;AACnC,6BAAmC;AAK5B,SAAS,eAAe,mBAA0D;AACvF,QAAM,OAA0B,EAAE,GAAG,kBAAkB;AACvD,QAAM,aAAa,KAAK,OAAO,mBAAmB;AAClD,OAAK,UAAU,KAAK,WAAW,aAAa;AAE5C,SAAO,SAAU,QAAgB,cAA4B;AAC3D,UAAM,OAA+B;AAAA,MACnC,MAAM,uCAAgB;AAAA,MACtB,QAAQ,OAAO;AAAA,MACf;AAAA,MACA,mBAAmB;AAAA,IACrB;AACA,mDAAmB,EAAE,sBAAsB,IAAI,6CAAmB,IAAI,CAAC;AAAA,EACzE;AACF;",
  "names": []
}
