{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsBase64.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase64Validator from 'validator/lib/isBase64';\n\nexport const IS_BASE64 = 'isBase64';\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase64(value: unknown): boolean {\n  return typeof value === 'string' && isBase64Validator(value);\n}\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase64(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BASE64,\n      validator: {\n        validate: (value, args): boolean => isBase64(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be base64 encoded', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,sBAA8B;AAEvB,MAAM,YAAY;AAMlB,SAAS,SAAS,OAAyB;AAChD,SAAO,OAAO,UAAU,gBAAY,gBAAAA,SAAkB,KAAK;AAC7D;AAMO,SAAS,SAAS,mBAA0D;AACjF,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,SAAS,KAAK;AAAA,QAClD,oBAAgB,gCAAa,gBAAc,aAAa,oCAAoC,iBAAiB;AAAA,MAC/G;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isBase64Validator"]
}
