{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/Length.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\n\nexport const IS_LENGTH = 'isLength';\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function length(value: unknown, min: number, max?: number): boolean {\n  return typeof value === 'string' && isLengthValidator(value, { min, max });\n}\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function Length(min: number, max?: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LENGTH,\n      constraints: [min, max],\n      validator: {\n        validate: (value, args): boolean => length(value, args.constraints[0], args.constraints[1]),\n        defaultMessage: buildMessage((eachPrefix, args) => {\n          const isMinLength = args.constraints[0] !== null && args.constraints[0] !== undefined;\n          const isMaxLength = args.constraints[1] !== null && args.constraints[1] !== undefined;\n          if (isMinLength && (!args.value || args.value.length < args.constraints[0])) {\n            return eachPrefix + '$property must be longer than or equal to $constraint1 characters';\n          } else if (isMaxLength && args.value.length > args.constraints[1]) {\n            return eachPrefix + '$property must be shorter than or equal to $constraint2 characters';\n          }\n          return (\n            eachPrefix +\n            '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters'\n          );\n        }, validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,sBAA8B;AAEvB,MAAM,YAAY;AAMlB,SAAS,OAAO,OAAgB,KAAa,KAAuB;AACzE,SAAO,OAAO,UAAU,gBAAY,gBAAAA,SAAkB,OAAO,EAAE,KAAK,IAAI,CAAC;AAC3E;AAMO,SAAS,OAAO,KAAa,KAAc,mBAA0D;AAC1G,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,KAAK,GAAG;AAAA,MACtB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,OAAO,OAAO,KAAK,YAAY,IAAI,KAAK,YAAY,EAAE;AAAA,QAC1F,oBAAgB,gCAAa,CAAC,YAAY,SAAS;AACjD,gBAAM,cAAc,KAAK,YAAY,OAAO,QAAQ,KAAK,YAAY,OAAO;AAC5E,gBAAM,cAAc,KAAK,YAAY,OAAO,QAAQ,KAAK,YAAY,OAAO;AAC5E,cAAI,gBAAgB,CAAC,KAAK,SAAS,KAAK,MAAM,SAAS,KAAK,YAAY,KAAK;AAC3E,mBAAO,aAAa;AAAA,UACtB,WAAW,eAAe,KAAK,MAAM,SAAS,KAAK,YAAY,IAAI;AACjE,mBAAO,aAAa;AAAA,UACtB;AACA,iBACE,aACA;AAAA,QAEJ,GAAG,iBAAiB;AAAA,MACtB;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isLengthValidator"]
}
