{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsUppercase.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUppercaseValidator from 'validator/lib/isUppercase';\n\nexport const IS_UPPERCASE = 'isUppercase';\n\n/**\n * Checks if the string is uppercase.\n * If given value is not a string, then it returns false.\n */\nexport function isUppercase(value: unknown): boolean {\n  return typeof value === 'string' && isUppercaseValidator(value);\n}\n\n/**\n * Checks if the string is uppercase.\n * If given value is not a string, then it returns false.\n */\nexport function IsUppercase(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_UPPERCASE,\n      validator: {\n        validate: (value, args): boolean => isUppercase(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be uppercase', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,yBAAiC;AAE1B,MAAM,eAAe;AAMrB,SAAS,YAAY,OAAyB;AACnD,SAAO,OAAO,UAAU,gBAAY,mBAAAA,SAAqB,KAAK;AAChE;AAMO,SAAS,YAAY,mBAA0D;AACpF,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,YAAY,KAAK;AAAA,QACrD,oBAAgB,gCAAa,gBAAc,aAAa,+BAA+B,iBAAiB;AAAA,MAC1G;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isUppercaseValidator"]
}
