{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsByteLength.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isByteLengthValidator from 'validator/lib/isByteLength';\n\nexport const IS_BYTE_LENGTH = 'isByteLength';\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function isByteLength(value: unknown, min: number, max?: number): boolean {\n  return typeof value === 'string' && isByteLengthValidator(value, { min, max });\n}\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function IsByteLength(min: number, max?: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BYTE_LENGTH,\n      constraints: [min, max],\n      validator: {\n        validate: (value, args): boolean => isByteLength(value, args.constraints[0], args.constraints[1]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\",\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,0BAAkC;AAE3B,MAAM,iBAAiB;AAMvB,SAAS,aAAa,OAAgB,KAAa,KAAuB;AAC/E,SAAO,OAAO,UAAU,gBAAY,oBAAAA,SAAsB,OAAO,EAAE,KAAK,IAAI,CAAC;AAC/E;AAMO,SAAS,aAAa,KAAa,KAAc,mBAA0D;AAChH,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,KAAK,GAAG;AAAA,MACtB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,aAAa,OAAO,KAAK,YAAY,IAAI,KAAK,YAAY,EAAE;AAAA,QAChG,oBAAgB;AAAA,UACd,gBAAc,aAAa;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isByteLengthValidator"]
}
