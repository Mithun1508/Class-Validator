{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsUrl.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUrlValidator from 'validator/lib/isURL';\nimport ValidatorJS from 'validator';\n\nexport const IS_URL = 'isUrl';\n\n/**\n * Checks if the string is an url.\n * If given value is not a string, then it returns false.\n */\nexport function isURL(value: string, options?: ValidatorJS.IsURLOptions): boolean {\n  return typeof value === 'string' && isUrlValidator(value, options);\n}\n\n/**\n * Checks if the string is an url.\n * If given value is not a string, then it returns false.\n */\nexport function IsUrl(options?: ValidatorJS.IsURLOptions, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_URL,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isURL(value, args.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an URL address', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,mBAA2B;AAGpB,MAAM,SAAS;AAMf,SAAS,MAAM,OAAe,SAA6C;AAChF,SAAO,OAAO,UAAU,gBAAY,aAAAA,SAAe,OAAO,OAAO;AACnE;AAMO,SAAS,MAAM,SAAoC,mBAA0D;AAClH,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,OAAO;AAAA,MACrB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,MAAM,OAAO,KAAK,YAAY,EAAE;AAAA,QACpE,oBAAgB,gCAAa,gBAAc,aAAa,oCAAoC,iBAAiB;AAAA,MAC/G;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isUrlValidator"]
}
