{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsPassportNumber.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPassportNumberValidator from 'validator/lib/isPassportNumber';\n\nexport const IS_PASSPORT_NUMBER = 'isPassportNumber';\n\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function isPassportNumber(value: unknown, countryCode: string): boolean {\n  return typeof value === 'string' && isPassportNumberValidator(value, countryCode);\n}\n\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function IsPassportNumber(countryCode: string, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_PASSPORT_NUMBER,\n      constraints: [countryCode],\n      validator: {\n        validate: (value, args): boolean => isPassportNumber(value, args.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be valid passport number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,8BAAsC;AAE/B,MAAM,qBAAqB;AAM3B,SAAS,iBAAiB,OAAgB,aAA8B;AAC7E,SAAO,OAAO,UAAU,gBAAY,wBAAAA,SAA0B,OAAO,WAAW;AAClF;AAMO,SAAS,iBAAiB,aAAqB,mBAA0D;AAC9G,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,WAAW;AAAA,MACzB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,iBAAiB,OAAO,KAAK,YAAY,EAAE;AAAA,QAC/E,oBAAgB;AAAA,UACd,gBAAc,aAAa;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isPassportNumberValidator"]
}
