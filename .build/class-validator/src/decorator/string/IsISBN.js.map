{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsISBN.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIsbnValidator from 'validator/lib/isISBN';\n\nexport type IsISBNVersion = '10' | '13' | 10 | 13;\n\nexport const IS_ISBN = 'isIsbn';\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function isISBN(value: unknown, version?: IsISBNVersion): boolean {\n  const versionStr = version ? (`${version}` as '10' | '13') : undefined;\n  return typeof value === 'string' && isIsbnValidator(value, versionStr);\n}\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function IsISBN(version?: IsISBNVersion, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISBN,\n      constraints: [version],\n      validator: {\n        validate: (value, args): boolean => isISBN(value, args.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ISBN', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,oBAA4B;AAIrB,MAAM,UAAU;AAMhB,SAAS,OAAO,OAAgB,SAAkC;AACvE,QAAM,aAAa,UAAW,GAAG,YAA4B;AAC7D,SAAO,OAAO,UAAU,gBAAY,cAAAA,SAAgB,OAAO,UAAU;AACvE;AAMO,SAAS,OAAO,SAAyB,mBAA0D;AACxG,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,OAAO;AAAA,MACrB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,OAAO,OAAO,KAAK,YAAY,EAAE;AAAA,QACrE,oBAAgB,gCAAa,gBAAc,aAAa,6BAA6B,iBAAiB;AAAA,MACxG;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isIsbnValidator"]
}
