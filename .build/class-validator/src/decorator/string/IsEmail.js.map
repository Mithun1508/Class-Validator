{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsEmail.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isEmailValidator from 'validator/lib/isEmail';\nimport ValidatorJS from 'validator';\n\nexport const IS_EMAIL = 'isEmail';\n\n/**\n * Checks if the string is an email.\n * If given value is not a string, then it returns false.\n */\nexport function isEmail(value: unknown, options?: ValidatorJS.IsEmailOptions): boolean {\n  return typeof value === 'string' && isEmailValidator(value, options);\n}\n\n/**\n * Checks if the string is an email.\n * If given value is not a string, then it returns false.\n */\nexport function IsEmail(\n  options?: ValidatorJS.IsEmailOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_EMAIL,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isEmail(value, args.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an email', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,qBAA6B;AAGtB,MAAM,WAAW;AAMjB,SAAS,QAAQ,OAAgB,SAA+C;AACrF,SAAO,OAAO,UAAU,gBAAY,eAAAA,SAAiB,OAAO,OAAO;AACrE;AAMO,SAAS,QACd,SACA,mBACmB;AACnB,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,OAAO;AAAA,MACrB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,QAAQ,OAAO,KAAK,YAAY,EAAE;AAAA,QACtE,oBAAgB,gCAAa,gBAAc,aAAa,8BAA8B,iBAAiB;AAAA,MACzG;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isEmailValidator"]
}
