{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsCurrency.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isCurrencyValidator from 'validator/lib/isCurrency';\nimport ValidatorJS from 'validator';\n\nexport const IS_CURRENCY = 'isCurrency';\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function isCurrency(value: unknown, options?: ValidatorJS.IsCurrencyOptions): boolean {\n  return typeof value === 'string' && isCurrencyValidator(value, options);\n}\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function IsCurrency(\n  options?: ValidatorJS.IsCurrencyOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_CURRENCY,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isCurrency(value, args.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a currency', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,wBAAgC;AAGzB,MAAM,cAAc;AAMpB,SAAS,WAAW,OAAgB,SAAkD;AAC3F,SAAO,OAAO,UAAU,gBAAY,kBAAAA,SAAoB,OAAO,OAAO;AACxE;AAMO,SAAS,WACd,SACA,mBACmB;AACnB,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,OAAO;AAAA,MACrB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,WAAW,OAAO,KAAK,YAAY,EAAE;AAAA,QACzE,oBAAgB,gCAAa,gBAAc,aAAa,gCAAgC,iBAAiB;AAAA,MAC3G;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isCurrencyValidator"]
}
