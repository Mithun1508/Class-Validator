{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/Matches.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\n\nexport const MATCHES = 'matches';\n\n/**\n * Checks if string matches the pattern. Either matches('foo', /foo/i).\n * If given value is not a string, then it returns false.\n */\nexport function matches(value: string, pattern: RegExp): boolean;\nexport function matches(value: string, pattern: string, modifiers: string): boolean;\nexport function matches(value: string, pattern: RegExp | string, modifiers?: string): boolean {\n  return typeof value === 'string' && matchesValidator(value, (pattern as unknown) as any, modifiers);\n}\n\n/**\n * Checks if string matches the pattern. Either matches('foo', /foo/i)\n * If given value is not a string, then it returns false.\n */\nexport function Matches(pattern: RegExp, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Matches(pattern: string, modifiers?: string, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Matches(\n  pattern: RegExp | string,\n  modifiersOrAnnotationOptions?: string | ValidationOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  let modifiers: string;\n  if (modifiersOrAnnotationOptions && modifiersOrAnnotationOptions instanceof Object && !validationOptions) {\n    validationOptions = modifiersOrAnnotationOptions;\n  } else {\n    modifiers = modifiersOrAnnotationOptions as string;\n  }\n\n  return ValidateBy(\n    {\n      name: MATCHES,\n      constraints: [pattern, modifiers],\n      validator: {\n        validate: (value, args): boolean => matches(value, args.constraints[0], args.constraints[1]),\n        defaultMessage: buildMessage(\n          (eachPrefix, args) => eachPrefix + '$property must match $constraint1 regular expression',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,qBAA6B;AAEtB,MAAM,UAAU;AAQhB,SAAS,QAAQ,OAAe,SAA0B,WAA6B;AAC5F,SAAO,OAAO,UAAU,gBAAY,eAAAA,SAAiB,OAAQ,SAA4B,SAAS;AACpG;AAQO,SAAS,QACd,SACA,8BACA,mBACmB;AACnB,MAAI;AACJ,MAAI,gCAAgC,wCAAwC,UAAU,CAAC,mBAAmB;AACxG,wBAAoB;AAAA,EACtB,OAAO;AACL,gBAAY;AAAA,EACd;AAEA,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,SAAS,SAAS;AAAA,MAChC,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,QAAQ,OAAO,KAAK,YAAY,IAAI,KAAK,YAAY,EAAE;AAAA,QAC3F,oBAAgB;AAAA,UACd,CAAC,YAAY,SAAS,aAAa;AAAA,UACnC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["matchesValidator"]
}
