{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/string/IsUUID.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUuidValidator from 'validator/lib/isUUID';\n\nexport type UUIDVersion = '3' | '4' | '5' | 'all' | 3 | 4 | 5;\n\nexport const IS_UUID = 'isUuid';\n\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n */\nexport function isUUID(value: unknown, version?: UUIDVersion): boolean {\n  return typeof value === 'string' && isUuidValidator(value, version);\n}\n\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n */\nexport function IsUUID(version?: UUIDVersion, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_UUID,\n      constraints: [version],\n      validator: {\n        validate: (value, args): boolean => isUUID(value, args.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a UUID', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,oBAA4B;AAIrB,MAAM,UAAU;AAMhB,SAAS,OAAO,OAAgB,SAAgC;AACrE,SAAO,OAAO,UAAU,gBAAY,cAAAA,SAAgB,OAAO,OAAO;AACpE;AAMO,SAAS,OAAO,SAAuB,mBAA0D;AACtG,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,OAAO;AAAA,MACrB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,OAAO,OAAO,KAAK,YAAY,EAAE;AAAA,QACrE,oBAAgB,gCAAa,gBAAc,aAAa,4BAA4B,iBAAiB;AAAA,MACvG;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isUuidValidator"]
}
