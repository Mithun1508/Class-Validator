{
  "version": 3,
  "sources": ["../../../../../class-validator/src/decorator/number/IsDivisibleBy.ts"],
  "sourcesContent": ["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDivisibleByValidator from 'validator/lib/isDivisibleBy';\n\nexport const IS_DIVISIBLE_BY = 'isDivisibleBy';\n\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function isDivisibleBy(value: unknown, num: number): boolean {\n  return typeof value === 'number' && typeof num === 'number' && isDivisibleByValidator(String(value), num);\n}\n\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function IsDivisibleBy(num: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DIVISIBLE_BY,\n      constraints: [num],\n      validator: {\n        validate: (value, args): boolean => isDivisibleBy(value, args.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be divisible by $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAyC;AACzC,2BAAmC;AAE5B,MAAM,kBAAkB;AAKxB,SAAS,cAAc,OAAgB,KAAsB;AAClE,SAAO,OAAO,UAAU,YAAY,OAAO,QAAQ,gBAAY,qBAAAA,SAAuB,OAAO,KAAK,GAAG,GAAG;AAC1G;AAKO,SAAS,cAAc,KAAa,mBAA0D;AACnG,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,aAAa,CAAC,GAAG;AAAA,MACjB,WAAW;AAAA,QACT,UAAU,CAAC,OAAO,SAAkB,cAAc,OAAO,KAAK,YAAY,EAAE;AAAA,QAC5E,oBAAgB;AAAA,UACd,gBAAc,aAAa;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["isDivisibleByValidator"]
}
