{
  "version": 3,
  "sources": ["../../../class-validator/src/container.ts"],
  "sourcesContent": ["/**\n * Container options.\n */\nexport interface UseContainerOptions {\n  /**\n   * If set to true, then default container will be used in the case if given container haven't returned anything.\n   */\n  fallback?: boolean;\n\n  /**\n   * If set to true, then default container will be used in the case if given container thrown an exception.\n   */\n  fallbackOnErrors?: boolean;\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nconst defaultContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T } = new (class {\n  private instances: { type: Function; object: any }[] = [];\n  get<T>(someClass: { new (...args: any[]): T }): T {\n    let instance = this.instances.find(instance => instance.type === someClass);\n    if (!instance) {\n      instance = { type: someClass, object: new someClass() };\n      this.instances.push(instance);\n    }\n\n    return instance.object;\n  }\n})();\n\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T };\nlet userContainerOptions: UseContainerOptions;\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions): void {\n  userContainer = iocContainer;\n  userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T } | Function): T {\n  if (userContainer) {\n    try {\n      const instance = userContainer.get(someClass);\n      if (instance) return instance;\n\n      if (!userContainerOptions || !userContainerOptions.fallback) return instance;\n    } catch (error) {\n      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;\n    }\n  }\n  return defaultContainer.get<T>(someClass);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA,MAAM,mBAAqF,IAAK,MAAM;AAAA,EAAN;AAC9F,SAAQ,YAA+C,CAAC;AAAA;AAAA,EACxD,IAAO,WAA2C;AAChD,QAAI,WAAW,KAAK,UAAU,KAAK,CAAAA,cAAYA,UAAS,SAAS,SAAS;AAC1E,QAAI,CAAC,UAAU;AACb,iBAAW,EAAE,MAAM,WAAW,QAAQ,IAAI,UAAU,EAAE;AACtD,WAAK,UAAU,KAAK,QAAQ;AAAA,IAC9B;AAEA,WAAO,SAAS;AAAA,EAClB;AACF,EAAG;AAEH,IAAI;AACJ,IAAI;AAKG,SAAS,aAAa,cAA4C,SAAqC;AAC5G,kBAAgB;AAChB,yBAAuB;AACzB;AAKO,SAAS,iBAAoB,WAAsD;AACxF,MAAI,eAAe;AACjB,QAAI;AACF,YAAM,WAAW,cAAc,IAAI,SAAS;AAC5C,UAAI;AAAU,eAAO;AAErB,UAAI,CAAC,wBAAwB,CAAC,qBAAqB;AAAU,eAAO;AAAA,IACtE,SAAS,OAAP;AACA,UAAI,CAAC,wBAAwB,CAAC,qBAAqB;AAAkB,cAAM;AAAA,IAC7E;AAAA,EACF;AACA,SAAO,iBAAiB,IAAO,SAAS;AAC1C;",
  "names": ["instance"]
}
