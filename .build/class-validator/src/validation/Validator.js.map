{
  "version": 3,
  "sources": ["../../../../class-validator/src/validation/Validator.ts"],
  "sourcesContent": ["import { ValidationError } from './ValidationError';\nimport { ValidatorOptions } from './ValidatorOptions';\nimport { ValidationExecutor } from './ValidationExecutor';\nimport { ValidationOptions } from '../decorator/ValidationOptions';\n\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nexport class Validator {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class.\n   */\n  validate(object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n  /**\n   * Performs validation of the given object based on validation schema.\n   */\n  validate(schemaName: string, object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validate(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<ValidationError[]> {\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n  }\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class and reject on error.\n   */\n  validateOrReject(object: object, options?: ValidatorOptions): Promise<void>;\n\n  /**\n   * Performs validation of the given object based on validation schema and reject on error.\n   */\n  validateOrReject(schemaName: string, object: object, options?: ValidatorOptions): Promise<void>;\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\n   */\n  async validateOrReject(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<void> {\n    const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    if (errors.length) return Promise.reject(errors);\n  }\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class.\n   * NOTE: This method completely ignores all async validations.\n   */\n  validateSync(object: object, options?: ValidatorOptions): ValidationError[];\n\n  /**\n   * Performs validation of the given object based on validation schema.\n   */\n  validateSync(schemaName: string, object: object, options?: ValidatorOptions): ValidationError[];\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validateSync(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): ValidationError[] {\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\n    const options =\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n\n    const executor = new ValidationExecutor(this, options);\n    executor.ignoreAsyncValidations = true;\n    const validationErrors: ValidationError[] = [];\n    executor.execute(object, schema, validationErrors);\n    return executor.stripEmptyErrors(validationErrors);\n  }\n\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   * Common method for `validateOrReject` and `validate` methods.\n   */\n  private coreValidate(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<ValidationError[]> {\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\n    const options =\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n\n    const executor = new ValidationExecutor(this, options);\n    const validationErrors: ValidationError[] = [];\n    executor.execute(object, schema, validationErrors);\n\n    return Promise.all(executor.awaitingPromises).then(() => {\n      return executor.stripEmptyErrors(validationErrors);\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,gCAAmC;AAM5B,MAAM,UAAU;AAAA,EAkBrB,SACE,oBACA,2BACA,uBAC4B;AAC5B,WAAO,KAAK,aAAa,oBAAoB,2BAA2B,qBAAqB;AAAA,EAC/F;AAAA,EAeA,MAAM,iBACJ,oBACA,2BACA,uBACe;AACf,UAAM,SAAS,MAAM,KAAK,aAAa,oBAAoB,2BAA2B,qBAAqB;AAC3G,QAAI,OAAO;AAAQ,aAAO,QAAQ,OAAO,MAAM;AAAA,EACjD;AAAA,EAgBA,aACE,oBACA,2BACA,uBACmB;AACnB,UAAM,SAAS,OAAO,uBAAuB,WAAY,4BAAuC;AAChG,UAAM,UACJ,OAAO,uBAAuB,WAAW,wBAAyB;AACpE,UAAM,SAAS,OAAO,uBAAuB,WAAW,qBAAqB;AAE7E,UAAM,WAAW,IAAI,6CAAmB,MAAM,OAAO;AACrD,aAAS,yBAAyB;AAClC,UAAM,mBAAsC,CAAC;AAC7C,aAAS,QAAQ,QAAQ,QAAQ,gBAAgB;AACjD,WAAO,SAAS,iBAAiB,gBAAgB;AAAA,EACnD;AAAA,EASQ,aACN,oBACA,2BACA,uBAC4B;AAC5B,UAAM,SAAS,OAAO,uBAAuB,WAAY,4BAAuC;AAChG,UAAM,UACJ,OAAO,uBAAuB,WAAW,wBAAyB;AACpE,UAAM,SAAS,OAAO,uBAAuB,WAAW,qBAAqB;AAE7E,UAAM,WAAW,IAAI,6CAAmB,MAAM,OAAO;AACrD,UAAM,mBAAsC,CAAC;AAC7C,aAAS,QAAQ,QAAQ,QAAQ,gBAAgB;AAEjD,WAAO,QAAQ,IAAI,SAAS,gBAAgB,EAAE,KAAK,MAAM;AACvD,aAAO,SAAS,iBAAiB,gBAAgB;AAAA,IACnD,CAAC;AAAA,EACH;AACF;",
  "names": []
}
