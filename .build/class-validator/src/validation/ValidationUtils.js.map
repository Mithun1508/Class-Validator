{
  "version": 3,
  "sources": ["../../../../class-validator/src/validation/ValidationUtils.ts"],
  "sourcesContent": ["import { ValidationArguments } from './ValidationArguments';\n\n/**\n * Convert the constraint to a string to be shown in an error\n */\nexport function constraintToString(constraint: unknown): string {\n  if (Array.isArray(constraint)) {\n    return constraint.join(', ');\n  }\n\n  return `${constraint}`;\n}\n\nexport class ValidationUtils {\n  static replaceMessageSpecialTokens(\n    message: string | ((args: ValidationArguments) => string),\n    validationArguments: ValidationArguments\n  ): string {\n    let messageString: string;\n    if (message instanceof Function) {\n      messageString = (message as (args: ValidationArguments) => string)(validationArguments);\n    } else if (typeof message === 'string') {\n      messageString = message;\n    }\n\n    if (messageString && validationArguments.constraints instanceof Array) {\n      validationArguments.constraints.forEach((constraint, index) => {\n        messageString = messageString.replace(\n          new RegExp(`\\\\$constraint${index + 1}`, 'g'),\n          constraintToString(constraint)\n        );\n      });\n    }\n\n    if (\n      messageString &&\n      validationArguments.value !== undefined &&\n      validationArguments.value !== null &&\n      typeof validationArguments.value === 'string'\n    )\n      messageString = messageString.replace(/\\$value/g, validationArguments.value);\n    if (messageString) messageString = messageString.replace(/\\$property/g, validationArguments.property);\n    if (messageString) messageString = messageString.replace(/\\$target/g, validationArguments.targetName);\n\n    return messageString;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,SAAS,mBAAmB,YAA6B;AAC9D,MAAI,MAAM,QAAQ,UAAU,GAAG;AAC7B,WAAO,WAAW,KAAK,IAAI;AAAA,EAC7B;AAEA,SAAO,GAAG;AACZ;AAEO,MAAM,gBAAgB;AAAA,EAC3B,OAAO,4BACL,SACA,qBACQ;AACR,QAAI;AACJ,QAAI,mBAAmB,UAAU;AAC/B,sBAAiB,QAAkD,mBAAmB;AAAA,IACxF,WAAW,OAAO,YAAY,UAAU;AACtC,sBAAgB;AAAA,IAClB;AAEA,QAAI,iBAAiB,oBAAoB,uBAAuB,OAAO;AACrE,0BAAoB,YAAY,QAAQ,CAAC,YAAY,UAAU;AAC7D,wBAAgB,cAAc;AAAA,UAC5B,IAAI,OAAO,gBAAgB,QAAQ,KAAK,GAAG;AAAA,UAC3C,mBAAmB,UAAU;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QACE,iBACA,oBAAoB,UAAU,UAC9B,oBAAoB,UAAU,QAC9B,OAAO,oBAAoB,UAAU;AAErC,sBAAgB,cAAc,QAAQ,YAAY,oBAAoB,KAAK;AAC7E,QAAI;AAAe,sBAAgB,cAAc,QAAQ,eAAe,oBAAoB,QAAQ;AACpG,QAAI;AAAe,sBAAgB,cAAc,QAAQ,aAAa,oBAAoB,UAAU;AAEpG,WAAO;AAAA,EACT;AACF;",
  "names": []
}
