{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/validation-functions-and-decorators.spec.ts"],
  "sourcesContent": ["import {\n  IsBooleanString,\n  IsPositive,\n  IsLatLong,\n  IsLongitude,\n  IsLatitude,\n  IsNegative,\n  Contains,\n  Equals,\n  MinDate,\n  MaxDate,\n  IsAlpha,\n  IsAlphanumeric,\n  IsAscii,\n  IsDecimal,\n  IsBase64,\n  IsBoolean,\n  IsByteLength,\n  IsCreditCard,\n  IsCurrency,\n  IsDate,\n  IsDivisibleBy,\n  IsEmail,\n  IsEnum,\n  IsFQDN,\n  IsFullWidth,\n  IsHalfWidth,\n  IsVariableWidth,\n  IsHexColor,\n  IsHexadecimal,\n  IsIP,\n  IsISBN,\n  IsISO8601,\n  IsIn,\n  IsInt,\n  IsJSON,\n  IsJWT,\n  IsObject,\n  IsNotEmptyObject,\n  Length,\n  IsLowercase,\n  IsMongoId,\n  IsMultibyte,\n  IsNumberString,\n  IsSurrogatePair,\n  IsUrl,\n  IsUUID,\n  IsUppercase,\n  Matches,\n  MinLength,\n  MaxLength,\n  Min,\n  Max,\n  IsNotEmpty,\n  IsMilitaryTime,\n  ArrayNotEmpty,\n  ArrayMinSize,\n  ArrayMaxSize,\n  NotEquals,\n  IsEmpty,\n  IsDefined,\n  IsNotIn,\n  IsNumber,\n  IsString,\n  NotContains,\n  ArrayContains,\n  ArrayNotContains,\n  ArrayUnique,\n  IsArray,\n  IsDateString,\n  IsInstance,\n  IsPhoneNumber,\n  IsISO31661Alpha2,\n  IsISO31661Alpha3,\n  IsHash,\n  IsMACAddress,\n  IsISSN,\n  IsFirebasePushId,\n  isDefined,\n  isNumber,\n  isURL,\n  isBoolean,\n  isString,\n  isInt,\n  isArray,\n  isEnum,\n  contains,\n  isObject,\n  isNotEmptyObject,\n  isInstance,\n  notContains,\n  isAlpha,\n  isAlphanumeric,\n  isAscii,\n  isDecimal,\n  isBase64,\n  isByteLength,\n  isCreditCard,\n  isCurrency,\n  isEmail,\n  isFQDN,\n  isFullWidth,\n  isHalfWidth,\n  isVariableWidth,\n  isHexColor,\n  isHexadecimal,\n  isMACAddress,\n  isISBN,\n  isISO8601,\n  isIP,\n  isJSON,\n  isJWT,\n  isLowercase,\n  isMongoId,\n  isMultibyte,\n  isSurrogatePair,\n  isUUID,\n  isUppercase,\n  length,\n  minLength,\n  maxLength,\n  isFirebasePushId,\n  equals,\n  notEquals,\n  isEmpty,\n  isNotEmpty,\n  isIn,\n  isNotIn,\n  isDateString,\n  isDivisibleBy,\n  isPositive,\n  isNegative,\n  min,\n  max,\n  isBooleanString,\n  isNumberString,\n  matches,\n  isHash,\n  isISSN,\n  arrayContains,\n  arrayNotContains,\n  arrayMinSize,\n  arrayMaxSize,\n  arrayUnique,\n  arrayNotEmpty,\n  minDate,\n  maxDate,\n  isDate,\n  IsEAN,\n  isEAN,\n  IsEthereumAddress,\n  isEthereumAddress,\n  IsBtcAddress,\n  isBtcAddress,\n  IsDataURI,\n  isDataURI,\n  IsHSL,\n  isHSL,\n  IsRgbColor,\n  isRgbColor,\n  isIdentityCard,\n  IsIdentityCard,\n  IsBase32,\n  isBase32,\n  IsIBAN,\n  isIBAN,\n  IsBIC,\n  isBIC,\n  IsISRC,\n  isISRC,\n  IsRFC3339,\n  isRFC3339,\n  IsLocale,\n  isLocale,\n  IsMagnetURI,\n  isMagnetURI,\n  IsMimeType,\n  isMimeType,\n  isOctal,\n  IsOctal,\n  IsPassportNumber,\n  isPassportNumber,\n  IsPostalCode,\n  isPostalCode,\n  IsSemVer,\n  isSemVer,\n} from '../../src/decorator/decorators';\nimport { Validator } from '../../src/validation/Validator';\nimport { ValidatorOptions } from '../../src/validation/ValidatorOptions';\nimport { constraintToString } from '../../src/validation/ValidationUtils';\nimport { default as ValidatorJS } from 'validator';\n\nexport function checkValidValues(\n  object: { someProperty: any },\n  values: any[],\n  validatorOptions?: ValidatorOptions\n): Promise<any> {\n  const validator = new Validator();\n  const promises = values.map(value => {\n    object.someProperty = value;\n    return validator.validate(object, validatorOptions).then(errors => {\n      expect(errors.length).toEqual(0);\n      if (errors.length !== 0) {\n        console.log(`Unexpected errors: ${JSON.stringify(errors)}`);\n        throw new Error('Unexpected validation errors');\n      }\n    });\n  });\n\n  return Promise.all(promises);\n}\n\nexport function checkInvalidValues(\n  object: { someProperty: any },\n  values: any[],\n  validatorOptions?: ValidatorOptions\n): Promise<any> {\n  const validator = new Validator();\n  const promises = values.map(value => {\n    object.someProperty = value;\n    return validator\n      .validate(object, validatorOptions)\n      .then(errors => {\n        expect(errors.length).toEqual(1);\n        if (errors.length !== 1) {\n          throw new Error('Missing validation errors');\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  });\n\n  return Promise.all(promises);\n}\n\nexport function checkReturnedError(\n  object: { someProperty: any },\n  values: any[],\n  validationType: string,\n  message: string,\n  validatorOptions?: ValidatorOptions\n): Promise<any> {\n  const validator = new Validator();\n  const promises = values.map(value => {\n    object.someProperty = value;\n    return validator.validate(object, validatorOptions).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].target).toEqual(object);\n      expect(errors[0].property).toEqual('someProperty');\n      expect(errors[0].constraints).toEqual({ [validationType]: message });\n      expect(errors[0].value).toEqual(value);\n    });\n  });\n\n  return Promise.all(promises);\n}\n\nconst validator = new Validator();\n\ndescribe('IsDefined', () => {\n  const validValues = [0, 1, true, false, '', '0', '1234', -1];\n  const invalidValues: any[] = [null, undefined];\n\n  class MyClass {\n    @IsDefined()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if validator.validate said that its valid with skipUndefinedProperties set to true', () => {\n    return checkValidValues(new MyClass(), validValues, { skipUndefinedProperties: true });\n  });\n\n  it('should fail if validator.validate said that its invalid with skipUndefinedProperties set to true', () => {\n    return checkInvalidValues(new MyClass(), invalidValues, { skipUndefinedProperties: true });\n  });\n\n  it('should not fail if validator.validate said that its valid with skipNullProperties set to true', () => {\n    return checkValidValues(new MyClass(), validValues, { skipNullProperties: true });\n  });\n\n  it('should fail if validator.validate said that its invalid with skipNullProperties set to true', () => {\n    return checkInvalidValues(new MyClass(), invalidValues, { skipNullProperties: true });\n  });\n\n  it('should not fail if validator.validate said that its valid with skipMissingProperties set to true', () => {\n    return checkValidValues(new MyClass(), validValues, { skipMissingProperties: true });\n  });\n\n  it('should fail if validator.validate said that its invalid with skipMissingProperties set to true', () => {\n    return checkInvalidValues(new MyClass(), invalidValues, { skipMissingProperties: true });\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isDefined(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isDefined(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isDefined';\n    const message = 'someProperty should not be null or undefined';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('Equals', () => {\n  const constraint = 'Alex';\n  const validValues = ['Alex'];\n  const invalidValues = ['Alexxx'];\n\n  class MyClass {\n    @Equals(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(equals(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(equals(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'equals';\n    const message = 'someProperty must be equal to ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('NotEquals', () => {\n  const constraint = 'Alex';\n  const validValues = ['Alexxx'];\n  const invalidValues = ['Alex'];\n\n  class MyClass {\n    @NotEquals(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(notEquals(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(notEquals(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'notEquals';\n    const message = 'someProperty should not be equal to ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsEmpty', () => {\n  const validValues = [null, undefined, ''];\n  const invalidValues = ['0', 0, 1, false, true];\n\n  class MyClass {\n    @IsEmpty()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isEmpty(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isEmpty(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isEmpty';\n    const message = 'someProperty must be empty';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsNotEmpty', () => {\n  const validValues = ['a', 'abc'];\n  const invalidValues = ['', undefined, null];\n\n  class MyClass {\n    @IsNotEmpty()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isNotEmpty(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isNotEmpty(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isNotEmpty';\n    const message = 'someProperty should not be empty';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsIn', () => {\n  const constraint = ['foo', 'bar'] as const;\n  const validValues = ['foo', 'bar'];\n  const invalidValues = ['foobar', 'barfoo', ''];\n\n  class MyClass {\n    @IsIn(constraint)\n    someProperty: string[];\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isIn(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isIn(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isIn';\n    const message = 'someProperty must be one of the following values: ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsNotIn', () => {\n  const constraint = ['foo', 'bar'] as const;\n  const validValues = ['foobar', 'barfoo', ''];\n  const invalidValues = ['foo', 'bar'];\n\n  class MyClass {\n    @IsNotIn(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isNotIn(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isNotIn(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isNotIn';\n    const message = 'someProperty should not be one of the following values: ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\n// -------------------------------------------------------------------------\n// Specifications: type check\n// -------------------------------------------------------------------------\n\ndescribe('IsBoolean', () => {\n  const validValues = [true, false];\n  const invalidValues = [0, 1, 'true', null, undefined];\n\n  class MyClass {\n    @IsBoolean()\n    someProperty: any;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isBoolean(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isBoolean(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isBoolean';\n    const message = 'someProperty must be a boolean value';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsLatLong', () => {\n  const validValues = ['27.6945311,85.3446311', '27.675509,85.2100893'];\n  const invalidValues = ['276945311,853446311', 'asas,as.as12'];\n\n  class MyClass {\n    @IsLatLong()\n    someProperty: any;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n});\n\ndescribe('IsLatitude', () => {\n  const validValues = ['27.6945311', '27.675509', 27.675509];\n  const invalidValues = ['276945311', 'asas', 1234222, 5678921];\n\n  class MyClass {\n    @IsLatitude()\n    someProperty: any;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n});\n\ndescribe('IsLongitude', () => {\n  const validValues = ['85.3446311', '85.2100893', 85.2100893];\n  const invalidValues = ['853446311', 'as.as12', 12345, 737399];\n\n  class MyClass {\n    @IsLongitude()\n    someProperty: any;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n});\n\ndescribe('IsDate', () => {\n  const validValues = [new Date()];\n  const invalidValues = [1, true, false, 'Mon Aug 17 2015 00:24:56 GMT-0500 (CDT)', '2009-05-19 14:39:22-06:00'];\n\n  class MyClass {\n    @IsDate()\n    someProperty: Date;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isDate(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isDate(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isDate';\n    const message = 'someProperty must be a Date instance';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsNumber', () => {\n  const validValues = [0, 1, 2, 3, 4, 5.4, -10];\n  const invalidValues = ['1', '0', true, false, '-100', 'abc', undefined, null];\n\n  class MyClass {\n    @IsNumber()\n    someProperty: number;\n  }\n\n  class NaNTestClass {\n    @IsNumber({ allowNaN: true })\n    someProperty: number;\n  }\n\n  class InfinityTestClass {\n    @IsNumber({ allowInfinity: true })\n    someProperty: number;\n  }\n\n  class MaxDecimalPlacesTest {\n    @IsNumber({ maxDecimalPlaces: 3 })\n    someProperty: number;\n  }\n\n  class ZeroDecimalPlacesTest {\n    @IsNumber({ maxDecimalPlaces: 0 })\n    someProperty: number;\n  }\n\n  it('should fail if NaN passed without allowing NaN values', () => {\n    return checkInvalidValues(new MyClass(), [NaN]);\n  });\n\n  it('should fail if Infinity passed without allowing NaN values', () => {\n    return checkInvalidValues(new MyClass(), [Infinity, -Infinity]);\n  });\n\n  it('should not fail if NaN passed and NaN as value is allowed', () => {\n    return checkValidValues(new NaNTestClass(), [NaN]);\n  });\n\n  it('should not fail if Infinity passed and Infinity as value is allowed', () => {\n    return checkValidValues(new InfinityTestClass(), [Infinity, -Infinity]);\n  });\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isNumber(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isNumber(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isNumber';\n    const message = 'someProperty must be a number conforming to the specified constraints';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n\n  it('should pass if number of decimal places within maxDecimalPlaces', () => {\n    return checkValidValues(new MaxDecimalPlacesTest(), [1.123]);\n  });\n\n  it('should fail if number of decimal places exceeds maxDecimalPlaces', () => {\n    return checkInvalidValues(new MaxDecimalPlacesTest(), [1.1234]);\n  });\n\n  it('should pass if number of decimal places is zero', () => {\n    return checkValidValues(new ZeroDecimalPlacesTest(), [-10, -1, 0, 1, 10]);\n  });\n\n  it('should fail if number of decimal places is not zero', () => {\n    return checkInvalidValues(new ZeroDecimalPlacesTest(), [-11.1, -2.2, -0.1, 0.1, 2.2, 11.1]);\n  });\n});\n\ndescribe('IsInt', () => {\n  const validValues = [2, 4, 100, 1000];\n  const invalidValues = ['01', '-01', '000', '100e10', '123.123', '   ', '', 2.5, -0.1];\n\n  class MyClass {\n    @IsInt()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isInt(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isInt(value as any)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isInt';\n    const message = 'someProperty must be an integer number';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsString', () => {\n  const validValues = ['true', 'false', 'hello', '0', '', '1'];\n  const invalidValues = [true, false, 1, 2, null, undefined];\n\n  class MyClass {\n    @IsString()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isString(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isString(value as any)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isString';\n    const message = 'someProperty must be a string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsDateString', () => {\n  const validValues = [\n    '2017-06-06T17:04:42.081Z',\n    '2017-06-06T17:04:42.081',\n    '2018-01-04T08:15:30',\n    '2018-01-04T08:15:30Z',\n    '2018-01-04T08:15:30+04:00',\n    '2018-01-04T08:15:30+04',\n    '2020-03-26T11:00:01-03:00',\n    '2020-03-26T11:00:01-03',\n    '2019-09-03T20:16:24.12Z',\n  ];\n  const invalidValues = [\n    true,\n    false,\n    1,\n    2,\n    null,\n    undefined,\n    'text',\n    'text2018-01-04T08:15:30+04',\n    '2018-01-04T08:15:30Ztext',\n    '2019-18-13T22:14:14.761Z', // month greater than 12\n    '2019-12-39T22:14:14.761Z', // day greater than 31\n    '2019-12-31T29:14:14.761Z', // hour greater than 24\n    '2019-00-31T29:14:14.761Z', // month of 0\n    '2019-01-00T29:14:14.761Z', // day of 0\n    '2019-09-03T20:16:24.12-5:00', // single digit hour in timezone offset\n    '2019-09-03T20:16:24.12+5:00',\n    '2019-09-03T20:16:24.12-05:0', // single digit minute in timezone offset\n    '2019-09-03T20:16:24.12+05:0',\n  ];\n\n  class MyClass {\n    @IsDateString()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isDateString(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isDateString(value as any)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isDateString';\n    const message = 'someProperty must be a valid ISO 8601 date string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsArray', () => {\n  const validValues = [[], [1, 2, 3], [0, 0, 0], [''], [0], [undefined], [{}], []];\n  const invalidValues = [true, false, 1, {}, null, undefined];\n\n  class MyClass {\n    @IsArray()\n    someProperty: string[];\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isArray(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isArray(value as any)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isArray';\n    const message = 'someProperty must be an array';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsEnum', () => {\n  enum MyEnum {\n    First = 1,\n    Second = 999,\n  }\n\n  enum MyStringEnum {\n    First = 'first',\n    Second = 'second',\n  }\n\n  const validValues = [MyEnum.First, MyEnum.Second];\n  const validStringValues = [MyStringEnum.First, MyStringEnum.Second];\n  const invalidValues = [true, false, 0, {}, null, undefined, 'F2irst'];\n\n  class MyClass {\n    @IsEnum(MyEnum)\n    someProperty: MyEnum;\n  }\n\n  class MyClass2 {\n    @IsEnum(MyStringEnum)\n    someProperty: MyStringEnum;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should not fail if validator.validate said that its valid (string enum)', () => {\n    return checkValidValues(new MyClass2(), validStringValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should fail if validator.validate said that its invalid (string enum)', () => {\n    return checkInvalidValues(new MyClass2(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isEnum(value, MyEnum)).toBeTruthy());\n  });\n\n  it('should not fail if method in validator said that its valid (string enum)', () => {\n    validStringValues.forEach(value => expect(isEnum(value, MyStringEnum)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isEnum(value, MyEnum)).toBeFalsy());\n  });\n\n  it('should fail if method in validator said that its invalid (string enum)', () => {\n    invalidValues.forEach(value => expect(isEnum(value, MyStringEnum)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isEnum';\n    const message = 'someProperty must be a valid enum value';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n\n  it('should return error object with proper data (string enum)', () => {\n    const validationType = 'isEnum';\n    const message = 'someProperty must be a valid enum value';\n    checkReturnedError(new MyClass2(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsDivisibleBy', () => {\n  const constraint = 2;\n  const validValues = [2, 4, 100, 1000];\n  const invalidValues = ['', undefined, null];\n\n  class MyClass {\n    @IsDivisibleBy(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isDivisibleBy(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isDivisibleBy(value as any, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isDivisibleBy';\n    const message = 'someProperty must be divisible by ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsPositive', () => {\n  const validValues = [3, 5000];\n  const invalidValues = [\n    '-1',\n    '-2',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '100000',\n    -500,\n    -123,\n    -1,\n    '   ',\n    '',\n  ];\n\n  class MyClass {\n    @IsPositive()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isPositive(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isPositive(value as any)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isPositive';\n    const message = 'someProperty must be a positive number';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsNegative', () => {\n  const validValues = [-3, -5000, -0.1];\n  const invalidValues = [\n    '-1',\n    '-2',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '100000',\n    500,\n    123,\n    1,\n    '   ',\n    '',\n  ];\n\n  class MyClass {\n    @IsNegative()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isNegative(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isNegative(value as any)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isNegative';\n    const message = 'someProperty must be a negative number';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('Min', () => {\n  const constraint = 10;\n  const validValues = [10, 11, 20, 30, 40];\n  const invalidValues = [2, 3, 4, 5, 6, 7, 8, 9, -10];\n\n  class MyClass {\n    @Min(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(min(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(min(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'min';\n    const message = 'someProperty must not be less than ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('Max', () => {\n  const constraint = 10;\n  const validValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10];\n  const invalidValues = [11, 20, 30, 40];\n\n  class MyClass {\n    @Max(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(max(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(max(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'max';\n    const message = 'someProperty must not be greater than ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('MinDate', () => {\n  const constraint = new Date(1995, 11, 17);\n  const validValues = [new Date()];\n  const invalidValues = [new Date(1994, 11, 17)];\n\n  class MyClass {\n    @MinDate(constraint)\n    someProperty: Date;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(minDate(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(minDate(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'minDate';\n    const message = 'minimal allowed date for someProperty is ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('MaxDate', () => {\n  const constraint = new Date(1995, 11, 17);\n  const validValues = [new Date(1994, 11, 17)];\n  const invalidValues = [new Date()];\n\n  class MyClass {\n    @MaxDate(constraint)\n    someProperty: Date;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(maxDate(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(maxDate(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'maxDate';\n    const message = 'maximal allowed date for someProperty is ' + constraintToString(constraint);\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsBooleanString', () => {\n  const validValues = ['1', '0', 'true', 'false'];\n  const invalidValues = ['2', '3', 'falze'];\n\n  class MyClass {\n    @IsBooleanString()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isBooleanString(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isBooleanString(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isBooleanString';\n    const message = 'someProperty must be a boolean string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsNumberString', () => {\n  const validValues = ['123', '123.123', '00123', '-00123', '0', '-0', '+123'];\n  const invalidValues = [' ', '.'];\n\n  class MyClass {\n    @IsNumberString()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isNumberString(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isNumberString(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isNumberString';\n    const message = 'someProperty must be a number string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('Contains', () => {\n  const constraint = 'hello';\n  const validValues = ['hello world'];\n  const invalidValues = [null, undefined, 'bye world'];\n\n  class MyClass {\n    @Contains(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(contains(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(contains(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'contains';\n    const message = 'someProperty must contain a ' + constraintToString(constraint) + ' string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('NotContains', () => {\n  const constraint = 'hello';\n  const validValues = ['bye world'];\n  const invalidValues = [null, undefined, 'hello world'];\n\n  class MyClass {\n    @NotContains(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(notContains(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(notContains(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'notContains';\n    const message = 'someProperty should not contain a ' + constraintToString(constraint) + ' string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsAlpha', () => {\n  const constraint = 'en-GB';\n  const validValues = ['hellomynameisalex'];\n  const invalidValues = [null, undefined, 'hello1mynameisalex'];\n\n  class MyClass {\n    @IsAlpha()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isAlpha(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isAlpha(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isAlpha';\n    const message = 'someProperty must contain only letters (a-zA-Z)';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsAlphanumeric', () => {\n  const constraint = '';\n  const validValues = ['hellomyname1salex'];\n  const invalidValues = [null, undefined, 'hell*mynameisalex'];\n\n  class MyClass {\n    @IsAlphanumeric()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isAlphanumeric(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isAlphanumeric(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isAlphanumeric';\n    const message = 'someProperty must contain only letters and numbers';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsAscii', () => {\n  const constraint = '';\n  const validValues = ['hellomyname1salex'];\n  const invalidValues = [null, undefined, 'hell*mynameis\u043B\u0435\u0445\u0430'];\n\n  class MyClass {\n    @IsAscii()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isAscii(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isAscii(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isAscii';\n    const message = 'someProperty must contain only ASCII characters';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsDecimal', () => {\n  const validValues = [\n    '100.0',\n    '100.1',\n    '100.3',\n    '100.4',\n    '100.5',\n    '100.6',\n    '100.7',\n    '100.8',\n    '100.9',\n    '1.9',\n    '-1.9',\n    '-124.1',\n  ];\n\n  const invalidValues = [\n    null,\n    undefined,\n    'hello',\n    '',\n    '1',\n    '1.',\n    '1,',\n    '-1',\n    '100',\n    '100,100',\n    '100.23',\n    '100.214141',\n    '100,23',\n    '100,2143192',\n  ];\n\n  const isDecimalOptions: ValidatorJS.IsDecimalOptions = {\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    force_decimal: true,\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    decimal_digits: '1',\n    locale: 'en-US',\n  };\n\n  class MyClass {\n    @IsDecimal(isDecimalOptions)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isDecimal(value, isDecimalOptions)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isDecimal(value, isDecimalOptions)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isDecimal';\n    const message = 'someProperty is not a valid decimal number.';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsBase32', () => {\n  const constraint = '';\n  const validValues = [\n    'ZG======',\n    'JBSQ====',\n    'JBSWY===',\n    'JBSWY3A=',\n    'JBSWY3DP',\n    'JBSWY3DPEA======',\n    'K5SWYY3PNVSSA5DPEBXG6ZA=',\n    'K5SWYY3PNVSSA5DPEBXG6===',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '12345',\n    '',\n    'JBSWY3DPtesting123',\n    'ZG=====',\n    'Z======',\n    'Zm=8JBSWY3DP',\n    '=m9vYg==',\n    'Zm9vYm/y====',\n  ];\n\n  class MyClass {\n    @IsBase32()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isBase32(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isBase32(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isBase32';\n    const message = 'someProperty must be base32 encoded';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsBase64', () => {\n  const constraint = '';\n  const validValues = ['aGVsbG8='];\n  const invalidValues = [null, undefined, 'hell*mynameisalex'];\n\n  class MyClass {\n    @IsBase64()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isBase64(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isBase64(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isBase64';\n    const message = 'someProperty must be base64 encoded';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsIBAN', () => {\n  const constraint = '';\n  const validValues = ['GR96 0810 0010 0000 0123 4567 890'];\n  const invalidValues = [null, undefined, 'XX22YYY1234567890123'];\n\n  class MyClass {\n    @IsIBAN()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isIBAN(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isIBAN(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isIBAN';\n    const message = 'someProperty must be an IBAN';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsBIC', () => {\n  const constraint = '';\n  const validValues = ['SBICKEN1345'];\n  const invalidValues = [null, undefined, 'SBIC23NXXX'];\n\n  class MyClass {\n    @IsBIC()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isBIC(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isBIC(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isBIC';\n    const message = 'someProperty must be a BIC or SWIFT code';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsEthereumAddress', () => {\n  const constraint = '';\n  const validValues = ['0x683E07492fBDfDA84457C16546ac3f433BFaa128'];\n  const invalidValues = [null, undefined, '0xFCb5AFB808b5679b4911230Aa41FfCD0cd335b422222'];\n\n  class MyClass {\n    @IsEthereumAddress()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isEthereumAddress(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isEthereumAddress(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isEthereumAddress';\n    const message = 'someProperty must be an Ethereum address';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsBtcAddress', () => {\n  const constraint = '';\n  const validValues = ['bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq'];\n  const invalidValues = [null, undefined, 'pp8skudq3x5hzw8ew7vzsw8tn4k8wxsqsv0lt0mf3g'];\n\n  class MyClass {\n    @IsBtcAddress()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isBtcAddress(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isBtcAddress(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isBtcAddress';\n    const message = 'someProperty must be a BTC address';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsDataURI', () => {\n  const constraint = '';\n  const validValues = ['data:text/html;charset=US-ASCII,%3Ch1%3EHello!%3C%2Fh1%3E'];\n  const invalidValues = [null, undefined, 'data:HelloWorld'];\n\n  class MyClass {\n    @IsDataURI()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isDataURI(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isDataURI(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isDataURI';\n    const message = 'someProperty must be a data uri format';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsHSL', () => {\n  const constraint = '';\n  const validValues = ['hsl(-540, 03%, 4%)'];\n  const invalidValues = [null, undefined, 'hsl(-0160, 100%, 100a)'];\n\n  class MyClass {\n    @IsHSL()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isHSL(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isHSL(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isHSL';\n    const message = 'someProperty must be a HSL color';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsRgbColor', () => {\n  const constraint = '';\n  const validValues = ['rgba(255,255,255,0.1)'];\n  const invalidValues = [null, undefined, 'rgba(0,0,0)'];\n\n  class MyClass {\n    @IsRgbColor()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isRgbColor(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isRgbColor(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isRgbColor';\n    const message = 'someProperty must be RGB color';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsIdentityCard', () => {\n  const constraint = 'he-IL';\n  const validValues = ['335240479'];\n  const invalidValues = [null, undefined, 'A1234567L'];\n\n  class MyClass {\n    @IsIdentityCard(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isIdentityCard(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isIdentityCard(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isIdentityCard';\n    const message = 'someProperty must be a identity card number';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsEAN', () => {\n  const constraint = '';\n  const validValues = ['9771234567003'];\n  const invalidValues = [null, undefined, '079777681629'];\n\n  class MyClass {\n    @IsEAN()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isEAN(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isEAN(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isEAN';\n    const message = 'someProperty must be an EAN (European Article Number)';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsISRC', () => {\n  const constraint = '';\n  const validValues = ['GBAYE6800011'];\n  const invalidValues = [null, undefined, 'SRC15705223'];\n\n  class MyClass {\n    @IsISRC()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isISRC(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isISRC(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isISRC';\n    const message = 'someProperty must be an ISRC';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsRFC3339', () => {\n  const constraint = '';\n  const validValues = ['2010-02-18t00:23:23.33+06:00'];\n  const invalidValues = [null, undefined, '2009-05-31 14:60:55Z'];\n\n  class MyClass {\n    @IsRFC3339()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isRFC3339(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isRFC3339(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isRFC3339';\n    const message = 'someProperty must be RFC 3339 date';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsLocale', () => {\n  const constraint = '';\n  const validValues = ['en_US_POSIX'];\n  const invalidValues = [null, undefined, 'lo_POP'];\n\n  class MyClass {\n    @IsLocale()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isLocale(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isLocale(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isLocale';\n    const message = 'someProperty must be locale';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsMagnetURI', () => {\n  const constraint = '';\n  const validValues = ['magnet:?xt=urn:btih:1GSHJVBDVDVJFYEHKFHEFIO8573898434JBFEGHD&dn=foo&tr=udp://foo.com:1337'];\n  const invalidValues = [\n    null,\n    undefined,\n    'magnet:?xt=uarn:btih:MCJDCYUFHEUD6E2752T7UJNEKHSUGEJFGTFHVBJS&dn=bar&tr=udp://bar.com:1337',\n  ];\n\n  class MyClass {\n    @IsMagnetURI()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isMagnetURI(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isMagnetURI(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isMagnetURI';\n    const message = 'someProperty must be magnet uri format';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsMimeType', () => {\n  const constraint = '';\n  const validValues = ['multipart/form-data; boundary=something; charset=utf-8'];\n  const invalidValues = [null, undefined, 'font/woff2; charset=utf-8'];\n\n  class MyClass {\n    @IsMimeType()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isMimeType(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isMimeType(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isMimeType';\n    const message = 'someProperty must be MIME type format';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsOctal', () => {\n  const constraint = '';\n  const validValues = ['0o01234567'];\n  const invalidValues = [null, undefined, '00c12345670c'];\n\n  class MyClass {\n    @IsOctal()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isOctal(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isOctal(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isOctal';\n    const message = 'someProperty must be valid octal number';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsPassportNumber', () => {\n  const constraint = 'DE';\n  const validValues = ['C26VMVVC3'];\n  const invalidValues = [null, undefined, 'AS0123456'];\n\n  class MyClass {\n    @IsPassportNumber(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isPassportNumber(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isPassportNumber(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isPassportNumber';\n    const message = 'someProperty must be valid passport number';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsPostalCode', () => {\n  const constraint = 'BR';\n  const validValues = ['39100-000'];\n  const invalidValues = [null, undefined, '13165-00'];\n\n  class MyClass {\n    @IsPostalCode(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isPostalCode(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isPostalCode(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isPostalCode';\n    const message = 'someProperty must be a postal code';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsSemVer', () => {\n  const constraint = '';\n  const validValues = ['1.1.2+meta-valid'];\n  const invalidValues = [null, undefined, '1.0.0-alpha_beta'];\n\n  class MyClass {\n    @IsSemVer()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isSemVer(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isSemVer(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isSemVer';\n    const message = 'someProperty must be a Semantic Versioning Specification';\n    checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsByteLength', () => {\n  const constraint1 = 2;\n  const constraint2 = 20;\n  const validValues = ['hellostring'];\n  const invalidValues = [null, undefined, 'helloveryveryveryverylongstring'];\n\n  class MyClass {\n    @IsByteLength(constraint1, constraint2)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isByteLength(value, constraint1, constraint2)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isByteLength(value, constraint1, constraint2)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isByteLength';\n    const message =\n      \"someProperty's byte length must fall into (\" +\n      constraintToString(constraint1) +\n      ', ' +\n      constraintToString(constraint2) +\n      ') range';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsCreditCard', () => {\n  const validValues = [\n    '375556917985515',\n    '36050234196908',\n    '4716461583322103',\n    '4716-2210-5188-5662',\n    '4929 7226 5379 7141',\n    '5398228707871527',\n  ];\n  const invalidValues = [null, undefined, 'foo', 'foo', '5398228707871528'];\n\n  class MyClass {\n    @IsCreditCard()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isCreditCard(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isCreditCard(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isCreditCard';\n    const message = 'someProperty must be a credit card';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsCurrency', () => {\n  const validValues = [\n    '-$10,123.45',\n    '$10,123.45',\n    '$10123.45',\n    '10,123.45',\n    '10123.45',\n    '10,123',\n    '1,123,456',\n    '1123456',\n    '1.39',\n    '.03',\n    '0.10',\n    '$0.10',\n    '-$0.01',\n    '-$.99',\n    '$100,234,567.89',\n    '$10,123',\n    '10,123',\n    '-10123',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '1.234',\n    '$1.1',\n    '$ 32.50',\n    '500$',\n    '.0001',\n    '$.001',\n    '$0.001',\n    '12,34.56',\n    '123456,123,123456',\n    '123,4',\n    ',123',\n    '$-,123',\n    '$',\n    '.',\n    ',',\n    '00',\n    '$-',\n    '$-,.',\n    '-',\n    '-$',\n    '',\n    '- $',\n  ];\n\n  class MyClass {\n    @IsCurrency()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isCurrency(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isCurrency(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isCurrency';\n    const message = 'someProperty must be a currency';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsEmail', () => {\n  const validValues = [\n    'foo@bar.com',\n    'x@x.au',\n    'foo@bar.com.au',\n    'foo+bar@bar.com',\n    'hans.m\u7AEFller@test.com',\n    'hans@m\u7AEFller.com',\n    'test|123@m\u7AEFller.com',\n    '\"foobar\"@example.com',\n    '\"  foo  m\u7AEFller \"@example.com',\n    '\"foo\\\\@bar\"@example.com',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    'invalidemail@',\n    'invalid.com',\n    '@invalid.com',\n    'foo@bar.com.',\n    'somename@\uFF47\uFF4D\uFF41\uFF49\uFF4C.com',\n    'foo@bar.co.uk.',\n    'z@co.c',\n    'gmail...ignores...dots...@gmail.com',\n    '\uFF47\uFF4D\uFF41\uFF49\uFF4C\uFF47\uFF4D\uFF41\uFF49\uFF4C\uFF47\uFF4D\uFF41\uFF49\uFF4C\uFF47\uFF4D\uFF41\uFF49\uFF4C\uFF47\uFF4D\uFF41\uFF49\uFF4C@gmail.com',\n  ];\n\n  class MyClass {\n    @IsEmail()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => {\n      expect(isEmail(value)).toBeTruthy();\n    });\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isEmail(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isEmail';\n    const message = 'someProperty must be an email';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsFQDN', () => {\n  const validValues = [\n    'domain.com',\n    'dom.plato',\n    'a.domain.co',\n    'foo--bar.com',\n    'xn--froschgrn-x9a.com',\n    'rebecca.blackfriday',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    'abc',\n    '256.0.0.0',\n    '_.com',\n    '*.some.com',\n    's!ome.com',\n    'domain.com/',\n    '/more.com',\n  ];\n\n  class MyClass {\n    @IsFQDN()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isFQDN(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isFQDN(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isFqdn';\n    const message = 'someProperty must be a valid domain name';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsFullWidth', () => {\n  const validValues = ['\u3072\u3089\u304C\u306A\u30FB\u30AB\u30BF\u30AB\u30CA\u3001\uFF0E\u6F22\u5B57', '\uFF13\u30FC\uFF10\u3000\uFF41\uFF20\uFF43\uFF4F\uFF4D', '\uFF26\uFF76\uFF80\uFF76\uFF85\uFF9E\uFFAC', 'Good\uFF1DParts'];\n  const invalidValues = [null, undefined, 'abc', 'abc123'];\n\n  class MyClass {\n    @IsFullWidth()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isFullWidth(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isFullWidth(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isFullWidth';\n    const message = 'someProperty must contain a full-width characters';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsHalfWidth', () => {\n  const validValues = ['l-btn_02--active', 'abc123\u3044', '\uFF76\uFF80\uFF76\uFF85\uFF9E\uFFAC\uFFE9'];\n  const invalidValues = [null, undefined, '\u3042\u3044\u3046\u3048\u304A', '\uFF10\uFF10\uFF11\uFF11'];\n\n  class MyClass {\n    @IsHalfWidth()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isHalfWidth(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isHalfWidth(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isHalfWidth';\n    const message = 'someProperty must contain a half-width characters';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsVariableWidth', () => {\n  const validValues = ['\u3072\u3089\u304C\u306A\u30AB\u30BF\u30AB\u30CA\u6F22\u5B57ABCDE', '\uFF13\u30FC\uFF10123', '\uFF26\uFF76\uFF80\uFF76\uFF85\uFF9E\uFFAC', 'Good\uFF1DParts'];\n  const invalidValues = [\n    null,\n    undefined,\n    'abc',\n    'abc123',\n    '!\"#$%&()<>/+=-_? ~^|.,@`{}[]',\n    '\u3072\u3089\u304C\u306A\u30FB\u30AB\u30BF\u30AB\u30CA\u3001\uFF0E\u6F22\u5B57',\n    '\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16',\n    '\uFF76\uFF80\uFF76\uFF85\uFF9E\uFFAC',\n  ];\n\n  class MyClass {\n    @IsVariableWidth()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isVariableWidth(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isVariableWidth(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isVariableWidth';\n    const message = 'someProperty must contain a full-width and half-width characters';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsHexColor', () => {\n  const validValues = ['#ff0034', '#CCCCCC', 'fff', '#f00'];\n  const invalidValues = [null, undefined, '#ff', '#xxxx', '#ff12FG'];\n\n  class MyClass {\n    @IsHexColor()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    invalidValues.forEach(value => expect(isHexColor(value)).toBeFalsy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    validValues.forEach(value => expect(isHexColor(value)).toBeTruthy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isHexColor';\n    const message = 'someProperty must be a hexadecimal color';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsHexadecimal', () => {\n  const validValues = ['deadBEEF', 'ff0044'];\n  const invalidValues = [null, undefined, 'abcdefg', '', '..'];\n\n  class MyClass {\n    @IsHexadecimal()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isHexadecimal(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isHexadecimal(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isHexadecimal';\n    const message = 'someProperty must be a hexadecimal number';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsMACAddress', () => {\n  const validValues = ['ab:ab:ab:ab:ab:ab', 'FF:FF:FF:FF:FF:FF', '01:02:03:04:05:ab', '01:AB:03:04:05:06'];\n  const invalidValues = [\n    null,\n    undefined,\n    'abc',\n    '01:02:03:04:05',\n    '01:02:03:04::ab',\n    '1:2:3:4:5:6',\n    'AB:CD:EF:GH:01:02',\n    'A9C5 D4 9F EB D3',\n    '01-02 03:04 05 ab',\n  ];\n\n  class MyClass {\n    @IsMACAddress()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isMACAddress(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isMACAddress(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isMacAddress';\n    const message = 'someProperty must be a MAC Address';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsIP', () => {\n  const validValues = [\n    '127.0.0.1',\n    '0.0.0.0',\n    '255.255.255.255',\n    '1.2.3.4',\n    '::1',\n    '2001:db8:0000:1:1:1:1:1',\n    '2001:41d0:2:a141::1',\n    '::ffff:127.0.0.1',\n    '::0000',\n    '0000::',\n    '1::',\n    '1111:1:1:1:1:1:1:1',\n    'fe80::a6db:30ff:fe98:e946',\n    '::',\n    '::ffff:127.0.0.1',\n    '0:0:0:0:0:ffff:127.0.0.1',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    'abc',\n    '256.0.0.0',\n    '0.0.0.256',\n    '26.0.0.256',\n    '::banana',\n    'banana::',\n    '::1banana',\n    '::1::',\n    '1:',\n    ':1',\n    ':1:1:1::2',\n    '1:1:1:1:1:1:1:1:1:1:1:1:1:1:1:1',\n    '::11111',\n    '11111:1:1:1:1:1:1:1',\n    '2001:db8:0000:1:1:1:1::1',\n    '0:0:0:0:0:0:ffff:127.0.0.1',\n    '0:0:0:0:ffff:127.0.0.1',\n  ];\n\n  class MyClass {\n    @IsIP()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isIP(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isIP(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isIp';\n    const message = 'someProperty must be an ip address';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsISBN version 10', () => {\n  const validValues = [\n    '3836221195',\n    '3-8362-2119-5',\n    '3 8362 2119 5',\n    '1617290858',\n    '1-61729-085-8',\n    '1 61729 085-8',\n    '0007269706',\n    '0-00-726970-6',\n    '0 00 726970 6',\n    '3423214120',\n    '3-423-21412-0',\n    '3 423 21412 0',\n    '340101319X',\n    '3-401-01319-X',\n    '3 401 01319 X',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '3423214121',\n    '3-423-21412-1',\n    '3 423 21412 1',\n    '978-3836221191',\n    '9783836221191',\n    '123456789a',\n    'foo',\n  ];\n\n  class MyClass {\n    @IsISBN(10)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isISBN(value, '10')).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isISBN(value, '10')).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isIsbn';\n    const message = 'someProperty must be an ISBN';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsISBN version 13', () => {\n  const validValues = [\n    '9783836221191',\n    '978-3-8362-2119-1',\n    '978 3 8362 2119 1',\n    '9783401013190',\n    '978-3401013190',\n    '978 3401013190',\n    '9784873113685',\n    '978-4-87311-368-5',\n    '978 4 87311 368 5',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '9783836221190',\n    '978-3-8362-2119-0',\n    '978 3 8362 2119 0',\n    '3836221195',\n    '3-8362-2119-5',\n    '3 8362 2119 5',\n    '01234567890ab',\n    'foo',\n    '',\n  ];\n\n  class MyClass {\n    @IsISBN(13)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isISBN(value, '13')).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isISBN(value, '13')).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isIsbn';\n    const message = 'someProperty must be an ISBN';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsISO8601', () => {\n  const validValues = [\n    '2009-12T12:34',\n    '2009',\n    '2009-05-19',\n    '2009-05-19',\n    '20090519',\n    '2009123',\n    '2009-05',\n    '2009-123',\n    '2009-222',\n    '2009-001',\n    '2009-W01-1',\n    '2009-W51-1',\n    '2009-W511',\n    '2009-W33',\n    '2009W511',\n    '2009-05-19',\n    '2009-05-19 00:00',\n    '2009-05-19 14',\n    '2009-05-19 14:31',\n    '2009-05-19 14:39:22',\n    '2009-05-19T14:39Z',\n    '2009-W21-2',\n    '2009-W21-2T01:22',\n    '2009-139',\n    '2009-05-19 14:39:22-06:00',\n    '2009-05-19 14:39:22+0600',\n    '2009-05-19 14:39:22-01',\n    '20090621T0545Z',\n    '2007-04-06T00:00',\n    '2007-04-05T24:00',\n    '2010-02-18T16:23:48.5',\n    '2010-02-18T16:23:48,444',\n    '2010-02-18T16:23:48,3-06:00',\n    '2010-02-18T16:23.4',\n    '2010-02-18T16:23,25',\n    '2010-02-18T16:23.33+0600',\n    '2010-02-18T16.23334444',\n    '2010-02-18T16,2283',\n    '2009-05-19 143922.500',\n    '2009-05-19 1439,55',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '200905',\n    '2009367',\n    '2009-',\n    '2007-04-05T24:50',\n    '2009-000',\n    '2009-M511',\n    '2009M511',\n    '2009-05-19T14a39r',\n    '2009-05-19T14:3924',\n    '2009-0519',\n    '2009-05-1914:39',\n    '2009-05-19 14:',\n    '2009-05-19r14:39',\n    '2009-05-19 14a39a22',\n    '200912-01',\n    '2009-05-19 14:39:22+06a00',\n    '2009-05-19 146922.500',\n    '2010-02-18T16.5:23.35:48',\n    '2010-02-18T16:23.35:48',\n    '2010-02-18T16:23.35:48.45',\n    '2009-05-19 14.5.44',\n    '2010-02-18T16:23.33.600',\n    '2010-02-18T16,25:23:48,444',\n  ];\n\n  class MyClass {\n    @IsISO8601()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isISO8601(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isISO8601(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isIso8601';\n    const message = 'someProperty must be a valid ISO 8601 date string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsJSON', () => {\n  const validValues = ['{ \"key\": \"value\" }', '{}'];\n  const invalidValues = [null, undefined, '{ key: \"value\" }', \"{ 'key': 'value' }\", 'null', '1234', 'false', '\"nope\"'];\n\n  class MyClass {\n    @IsJSON()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isJSON(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isJSON(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isJson';\n    const message = 'someProperty must be a json string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsJWT', () => {\n  const validValues = [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI',\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb3JlbSI6Imlwc3VtIn0.ymiJSsMJXR6tMSr8G9usjQ15_8hKPDv_CArLhxw28MI',\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkb2xvciI6InNpdCIsImFtZXQiOlsibG9yZW0iLCJpcHN1bSJdfQ.rRpe04zbWbbJjwM43VnHzAboDzszJtGrNsUxaqQ-GQ8',\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqb2huIjp7ImFnZSI6MjUsImhlaWdodCI6MTg1fSwiamFrZSI6eyJhZ2UiOjMwLCJoZWlnaHQiOjI3MH19.YRLPARDmhGMC3BBk_OhtwwK21PIkVCqQe8ncIRPKo-E',\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ', // No signature\n  ];\n  const invalidValues = ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', '$Zs.ewu.su84', 'ks64$S/9.dy$\u00A7kz.3sd73b'];\n\n  class MyClass {\n    @IsJWT()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isJWT(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isJWT(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isJwt';\n    const message = 'someProperty must be a jwt string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsObject', () => {\n  const validValues = [{ key: 'value' }, { key: 'value' }, {}];\n  const invalidValues: any[] = [\n    null,\n    undefined,\n    '{ key: \"value\" }',\n    \"{ 'key': 'value' }\",\n    'string',\n    1234,\n    false,\n    '[]',\n    [],\n    [{ key: 'value' }],\n  ];\n\n  class MyClass {\n    @IsObject()\n    someProperty: object;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isObject(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isObject(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isObject';\n    const message = 'someProperty must be an object';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsNotEmptyObject', () => {\n  const validValues = [{ key: 'value' }, { key: 'value' }, { key: undefined }, { key: null }];\n  const invalidValues = [\n    null,\n    undefined,\n    '{ key: \"value\" }',\n    \"{ 'key': 'value' }\",\n    'string',\n    1234,\n    false,\n    {},\n    [],\n    [{ key: 'value' }],\n  ];\n  const nullableValidValues = [{ key: 'value' }, { key: 'value' }];\n  const nullableInvalidValues = [\n    null,\n    undefined,\n    '{ key: \"value\" }',\n    \"{ 'key': 'value' }\",\n    'string',\n    1234,\n    false,\n    {},\n    { key: undefined },\n    { key: null },\n    [],\n    [{ key: 'value' }],\n  ];\n\n  class MyClass {\n    @IsNotEmptyObject()\n    someProperty: object;\n  }\n\n  class NullableMyClass {\n    @IsNotEmptyObject({ nullable: true })\n    someProperty: object;\n  }\n\n  it.each([\n    [new MyClass(), validValues],\n    [new NullableMyClass(), nullableValidValues],\n  ])('should not fail if validator.validate said that its valid', (validationObject, values) => {\n    return checkValidValues(validationObject, values);\n  });\n\n  it.each([\n    [new MyClass(), invalidValues],\n    [new NullableMyClass(), nullableInvalidValues],\n  ])('should fail if validator.validate said that its invalid', (validationObject, values) => {\n    return checkInvalidValues(validationObject, values);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isNotEmptyObject(value)).toBeTruthy());\n    nullableValidValues.forEach(value => expect(isNotEmptyObject(value, { nullable: true })).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isNotEmptyObject(value)).toBeFalsy());\n    nullableInvalidValues.forEach(value => expect(isNotEmptyObject(value, { nullable: true })).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isNotEmptyObject';\n    const message = 'someProperty must be a non-empty object';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsLowercase', () => {\n  const validValues = ['abc', 'abc123', 'this is lowercase.', 'tr\u7AEAs \u7AEFber'];\n  const invalidValues = [null, undefined, 'fooBar', '123A'];\n\n  class MyClass {\n    @IsLowercase()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isLowercase(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isLowercase(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isLowercase';\n    const message = 'someProperty must be a lowercase string';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsMongoId', () => {\n  const validValues = ['507f1f77bcf86cd799439011'];\n  const invalidValues = [\n    null,\n    undefined,\n    '507f1f77bcf86cd7994390',\n    '507f1f77bcf86cd79943901z',\n    '',\n    '507f1f77bcf86cd799439011 ',\n  ];\n\n  class MyClass {\n    @IsMongoId()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isMongoId(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isMongoId(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isMongoId';\n    const message = 'someProperty must be a mongodb id';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsMultibyte', () => {\n  const validValues = [\n    '\u3072\u3089\u304C\u306A\u30FB\u30AB\u30BF\u30AB\u30CA\u3001\uFF0E\u6F22\u5B57',\n    '\u3042\u3044\u3046\u3048\u304A foobar',\n    'test\uFF20example.com',\n    '1234abcDE\uFF58\uFF59\uFF5A',\n    '\uFF76\uFF80\uFF76\uFF85',\n    '\u4E2D\u6587',\n  ];\n  const invalidValues = [null, undefined, 'abc', 'abc123', '<>@\" *.'];\n\n  class MyClass {\n    @IsMultibyte()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isMultibyte(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isMultibyte(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isMultibyte';\n    const message = 'someProperty must contain one or more multibyte chars';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsSurrogatePair', () => {\n  const validValues = ['\uD842\uDFB7\u91CE\uD842\uDFB7', '\uD867\uDE3D', 'ABC\u5343\uD856\uDDC41-2-3'];\n  const invalidValues = [null, undefined, '\u5409\u91CE\u7AC8', '\u9BAA', 'ABC1-2-3'];\n\n  class MyClass {\n    @IsSurrogatePair()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isSurrogatePair(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isSurrogatePair(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isSurrogatePair';\n    const message = 'someProperty must contain any surrogate pairs chars';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsUrl', () => {\n  const validValues = [\n    'foobar.com',\n    'www.foobar.com',\n    'foobar.com/',\n    'valid.au',\n    'http://www.foobar.com/',\n    'http://www.foobar.com:23/',\n    'http://www.foobar.com:65535/',\n    'http://www.foobar.com:5/',\n    'https://www.foobar.com/',\n    'ftp://www.foobar.com/',\n    'http://www.foobar.com/~foobar',\n    'http://user:pass@www.foobar.com/',\n    'http://user:@www.foobar.com/',\n    'http://127.0.0.1/',\n    'http://10.0.0.0/',\n    'http://189.123.14.13/',\n    'http://duckduckgo.com/?q=%2F',\n    'http://foobar.com/t$-_.+!*\"(),',\n    'http://foobar.com/?foo=bar#baz=qux',\n    'http://foobar.com?foo=bar',\n    'http://foobar.com#baz=qux',\n    'http://www.xn--froschgrn-x9a.net/',\n    'http://xn--froschgrn-x9a.com/',\n    'http://foo--bar.com',\n    'http://h\u00F8yfjellet.no',\n    'http://xn--j1aac5a4g.xn--j1amh',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    'xyz://foobar.com',\n    'invalid/',\n    'invalid.x',\n    'invalid.',\n    '.com',\n    'http://com/',\n    'http://300.0.0.1/',\n    'mailto:foo@bar.com',\n    'rtmp://foobar.com',\n    'http://www.xn--.com/',\n    'http://xn--.com/',\n    'http://www.foobar.com:0/',\n    'http://www.foobar.com:70000/',\n    'http://www.foobar.com:99999/',\n    'http://www.-foobar.com/',\n    'http://www.foobar-.com/',\n    'http://foobar/# lol',\n    'http://foobar/? lol',\n    'http://foobar/ lol/',\n    'http://lol @foobar.com/',\n    'http://lol:lol @foobar.com/',\n    'http://lol:lol:lol@foobar.com/',\n    'http://lol: @foobar.com/',\n    'http://www.foo_bar.com/',\n    'http://www.foobar.com/\\t',\n    'http://\\n@www.foobar.com/',\n    '',\n    'http://localhost:61500this is an invalid url!!!!',\n    'http://foobar.com/' + new Array(2083).join('f'),\n    'http://*.foo.com',\n    '*.foo.com',\n    '!.foo.com',\n    'http://example.com.',\n    '////foobar.com',\n    'http:////foobar.com',\n  ];\n\n  class MyClass {\n    @IsUrl()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isURL(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isURL(value)).toBeFalsy());\n  });\n\n  it('should fail on localhost without require_tld option', () => {\n    expect(isURL('http://localhost:3000/')).toBeFalsy();\n  });\n\n  it('should pass on localhost with require_tld option', () => {\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    expect(isURL('http://localhost:3000/', { require_tld: false })).toBeTruthy();\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isUrl';\n    const message = 'someProperty must be an URL address';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsUUID', () => {\n  const validValues = [\n    'A987FBC9-4BED-3078-CF07-9141BA07C9F3',\n    'A987FBC9-4BED-4078-8F07-9141BA07C9F3',\n    'A987FBC9-4BED-5078-AF07-9141BA07C9F3',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '',\n    'xxxA987FBC9-4BED-3078-CF07-9141BA07C9F3',\n    'A987FBC9-4BED-3078-CF07-9141BA07C9F3xxx',\n    'A987FBC94BED3078CF079141BA07C9F3',\n    '934859',\n    '987FBC9-4BED-3078-CF07A-9141BA07C9F3',\n    'AAAAAAAA-1111-1111-AAAG-111111111111',\n  ];\n\n  class MyClass {\n    @IsUUID()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isUUID(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isUUID(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isUuid';\n    const message = 'someProperty must be a UUID';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsUUID v3', () => {\n  const validValues = ['A987FBC9-4BED-3078-CF07-9141BA07C9F3'];\n  const invalidValues = [\n    null,\n    undefined,\n    '',\n    'xxxA987FBC9-4BED-3078-CF07-9141BA07C9F3',\n    '934859',\n    'AAAAAAAA-1111-1111-AAAG-111111111111',\n    'A987FBC9-4BED-4078-8F07-9141BA07C9F3',\n    'A987FBC9-4BED-5078-AF07-9141BA07C9F3',\n  ];\n\n  class MyClass {\n    @IsUUID('3')\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isUUID(value, '3')).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isUUID(value, '3')).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isUuid';\n    const message = 'someProperty must be a UUID';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsUUID v4', () => {\n  const validValues = [\n    '713ae7e3-cb32-45f9-adcb-7c4fa86b90c1',\n    '625e63f3-58f5-40b7-83a1-a72ad31acffb',\n    '57b73598-8764-4ad0-a76a-679bb6640eb1',\n    '9c858901-8a57-4791-81fe-4c455b099bc9',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '',\n    'xxxA987FBC9-4BED-3078-CF07-9141BA07C9F3',\n    '934859',\n    'AAAAAAAA-1111-1111-AAAG-111111111111',\n    'A987FBC9-4BED-5078-AF07-9141BA07C9F3',\n    'A987FBC9-4BED-3078-CF07-9141BA07C9F3',\n  ];\n\n  class MyClass {\n    @IsUUID('4')\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isUUID(value, '4')).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isUUID(value, '4')).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isUuid';\n    const message = 'someProperty must be a UUID';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsUUID v5', () => {\n  const validValues = [\n    '987FBC97-4BED-5078-AF07-9141BA07C9F3',\n    '987FBC97-4BED-5078-BF07-9141BA07C9F3',\n    '987FBC97-4BED-5078-8F07-9141BA07C9F3',\n    '987FBC97-4BED-5078-9F07-9141BA07C9F3',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    '',\n    'xxxA987FBC9-4BED-3078-CF07-9141BA07C9F3',\n    '934859',\n    'AAAAAAAA-1111-1111-AAAG-111111111111',\n    '9c858901-8a57-4791-81fe-4c455b099bc9',\n    'A987FBC9-4BED-3078-CF07-9141BA07C9F3',\n  ];\n\n  class MyClass {\n    @IsUUID('5')\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isUUID(value, '5')).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isUUID(value, '5')).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isUuid';\n    const message = 'someProperty must be a UUID';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsFirebasePushId', () => {\n  const validValues = [\n    '-M-Jh_1KAH5rYJF_7-kY',\n    '-M1yvu7FKe87rR_62NH7',\n    '-M1jVySxQQPktYyXA2qE',\n    '-JhLeOlGIEjaIOFHR0xd',\n    '-JhQ76OEK_848CkIFhAq',\n    '-JhQ7APk0UtyRTFO9-TS',\n  ];\n  const invalidValues = [\n    null,\n    undefined,\n    true,\n    false,\n    '',\n    '5584fa9e-6146-497a-85c9-dbb459ef7b74',\n    'Steve',\n    'dbfa63ea-2c1f-4cf8-b6b9-192b070b558c',\n  ];\n\n  class MyClass {\n    @IsFirebasePushId()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isFirebasePushId(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isFirebasePushId(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'IsFirebasePushId';\n    const message = 'someProperty must be a Firebase Push Id';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsUppercase', () => {\n  const validValues = ['ABC', 'ABC123', 'ALL CAPS IS FUN.', '   .'];\n  const invalidValues = [null, undefined, 'fooBar', '123abc'];\n\n  class MyClass {\n    @IsUppercase()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isUppercase(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isUppercase(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isUppercase';\n    const message = 'someProperty must be uppercase';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('Length', () => {\n  const constraint1 = 2;\n  const constraint2 = 3;\n  const validValues = ['abc', 'de'];\n  const invalidValues = [null, undefined, '', 'a', 'abcd'];\n\n  class MyClass {\n    @Length(constraint1, constraint2)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(length(value, constraint1, constraint2)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(length(value, constraint1, constraint2)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'length';\n    const message = 'someProperty must be longer than or equal to ' + constraintToString(constraint1) + ' characters';\n    checkReturnedError(new MyClass(), ['', 'a'], validationType, message);\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'length';\n    const message = 'someProperty must be shorter than or equal to ' + constraintToString(constraint2) + ' characters';\n    checkReturnedError(new MyClass(), ['aaaa', 'azzazza'], validationType, message);\n  });\n});\n\ndescribe('MinLength', () => {\n  const constraint1 = 10;\n  const validValues = ['helloworld', 'hello how are you'];\n  const invalidValues = [null, undefined, 'hellowar', 'howareyou'];\n\n  class MyClass {\n    @MinLength(constraint1)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(minLength(value, constraint1)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(minLength(value, constraint1)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'minLength';\n    const message = 'someProperty must be longer than or equal to ' + constraintToString(constraint1) + ' characters';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('MaxLength', () => {\n  const constraint1 = 10;\n  const validValues = ['hellowar', 'howareyou', 'helloworld'];\n  const invalidValues = [null, undefined, 'helloworld!', 'hello how are you'];\n\n  class MyClass {\n    @MaxLength(constraint1)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(maxLength(value, constraint1)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(maxLength(value, constraint1)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'maxLength';\n    const message = 'someProperty must be shorter than or equal to ' + constraintToString(constraint1) + ' characters';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('Matches pattern RegExp', () => {\n  const constraint = /abc/;\n  const validValues = ['abc', 'abcdef', '123abc'];\n  const invalidValues = [null, undefined, 'acb', 'Abc'];\n\n  class MyClass {\n    @Matches(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(matches(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(matches(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'matches';\n    const message = 'someProperty must match ' + constraintToString(constraint) + ' regular expression';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('Matches pattern string with modifier', () => {\n  const constraint = 'abc';\n  const modifier = 'i';\n  const validValues = ['abc', 'abcdef', '123abc', 'AbC'];\n  const invalidValues = [null, undefined, 'acb'];\n\n  class MyClass {\n    @Matches(constraint, modifier)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(matches(value, constraint, modifier)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(matches(value, constraint, modifier)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'matches';\n    const message = 'someProperty must match ' + constraintToString(constraint) + ' regular expression';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsMilitaryTime', () => {\n  class MyClass {\n    @IsMilitaryTime()\n    someProperty: string;\n  }\n\n  it('should not fail for a valid time in the format HH:MM', () => {\n    const validValues = ['10:22', '12:03', '16:32', '23:59', '00:00'];\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail for invalid time format', () => {\n    const invalidValues = ['23:61', '25:00', '08:08 pm', '04:00am'];\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should fail for invalid values', () => {\n    const invalidValues = [undefined, null, '23:00 and invalid counterpart'];\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n});\n\ndescribe('isPhoneNumber', () => {\n  describe('with region', () => {\n    const validValues = [\n      '0311111111',\n      '031 633 60 01',\n      '079 4 666 666',\n      '075 416 20 30',\n      '+41 311111111',\n      '+41 31 633 60 01',\n      '+41 79 4 666 666',\n      '+41 75 416 20 30',\n      '+41 (0)311111111',\n      '+41 (0)31 633 60 01',\n      '+41 (0)79 4 666 666',\n      '+41 (0)75 416 20 30',\n      '+49 9072 1111',\n    ];\n    const invalidValues = [undefined, null, 'asdf', '1'];\n\n    class MyClass {\n      @IsPhoneNumber('CH')\n      someProperty: string;\n    }\n\n    it('should not fail if validator.validate said that its valid', () => {\n      return checkValidValues(new MyClass(), validValues);\n    });\n\n    it('should fail if validator.validate said that its invalid', () => {\n      return checkInvalidValues(new MyClass(), invalidValues);\n    });\n  });\n\n  describe('no region', () => {\n    const validValues = [\n      '+41 311111111',\n      '+41 31 633 60 01',\n      '+41 79 4 666 666',\n      '+41 75 416 20 30',\n      '+41 (0)311111111',\n      '+41 (0)31 633 60 01',\n      '+41 (0)79 4 666 666',\n      '+41 (0)75 416 20 30',\n      '+49 9072 1111',\n    ];\n    const invalidValues = [\n      '0311111111',\n      '031 633 60 01',\n      '079 4 666 666',\n      '075 416 20 30',\n      undefined,\n      null,\n      'asdf',\n      '1',\n    ];\n\n    class MyClass {\n      @IsPhoneNumber(null)\n      someProperty: string;\n    }\n\n    it('should not fail if validator.validate said that its valid', () => {\n      return checkValidValues(new MyClass(), validValues);\n    });\n\n    it('should fail if validator.validate said that its invalid', () => {\n      return checkInvalidValues(new MyClass(), invalidValues);\n    });\n  });\n});\n\ndescribe('IsISO31661Alpha2', () => {\n  class MyClass {\n    @IsISO31661Alpha2()\n    someProperty: string;\n  }\n\n  it('should not fail for a valid ISO31661 Alpha2 code', () => {\n    const validValues = ['AD', 'AE', 'AF', 'AG'];\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail for invalid values', () => {\n    const invalidValues = [undefined, null, '', 'AFR'];\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n});\n\ndescribe('IsISO31661Alpha3', () => {\n  class MyClass {\n    @IsISO31661Alpha3()\n    someProperty: string;\n  }\n\n  it('should not fail for a valid ISO31661 Alpha3 code', () => {\n    const validValues = ['ABW', 'HND', 'KHM', 'RWA'];\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail for invalid values', () => {\n    const invalidValues = [undefined, null, '', 'FR', 'fR', 'GB', 'PT', 'CM', 'JP', 'PM', 'ZW'];\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n});\n\ndescribe('isHash', () => {\n  function testHash(algorithm: ValidatorJS.HashAlgorithm, validValues: any[], invalidValues: any[]): void {\n    class MyClass {\n      @IsHash(algorithm)\n      someProperty: string;\n    }\n\n    it('should not fail if validator.validate said that its valid', () => {\n      return checkValidValues(new MyClass(), validValues);\n    });\n\n    it('should fail if validator.validate said that its invalid', () => {\n      return checkInvalidValues(new MyClass(), invalidValues);\n    });\n\n    it('should not fail if method in validator said that its valid', () => {\n      validValues.forEach(value => expect(isHash(value, algorithm)).toBeTruthy());\n    });\n\n    it('should fail if method in validator said that its invalid', () => {\n      invalidValues.forEach(value => expect(isHash(value, algorithm)).toBeFalsy());\n    });\n\n    it('should return error object with proper data', () => {\n      const validationType = 'isHash';\n      const message = `someProperty must be a hash of type ${algorithm}`;\n      return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n    });\n  }\n\n  for (const algorithm of ['md5', 'md4', 'ripemd128', 'tiger128']) {\n    const validValues = [\n      'd94f3f016ae679c3008de268209132f2',\n      '751adbc511ccbe8edf23d486fa4581cd',\n      '88dae00e614d8f24cfd5a8b3f8002e93',\n      '0bf1c35032a71a14c2f719e5a14c1e96',\n    ];\n    const invalidValues = [\n      undefined,\n      null,\n      'q94375dj93458w34',\n      '39485729348',\n      '%&FHKJFvk',\n      'KYT0bf1c35032a71a14c2f719e5a1',\n    ];\n\n    testHash(algorithm as ValidatorJS.HashAlgorithm, validValues, invalidValues);\n  }\n\n  for (const algorithm of ['crc32', 'crc32b']) {\n    const validValues = ['d94f3f01', '751adbc5', '88dae00e', '0bf1c350'];\n    const invalidValues = [\n      undefined,\n      null,\n      'KYT0bf1c35032a71a14c2f719e5a14c1',\n      'q94375dj93458w34',\n      'q943',\n      '39485729348',\n      '%&FHKJFvk',\n    ];\n\n    testHash(algorithm as ValidatorJS.HashAlgorithm, validValues, invalidValues);\n  }\n\n  for (const algorithm of ['sha1', 'tiger160', 'ripemd160']) {\n    const validValues = [\n      '3ca25ae354e192b26879f651a51d92aa8a34d8d3',\n      'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d',\n      'beb8c3f30da46be179b8df5f5ecb5e4b10508230',\n      'efd5d3b190e893ed317f38da2420d63b7ae0d5ed',\n    ];\n    const invalidValues = [\n      undefined,\n      null,\n      'KYT0bf1c35032a71a14c2f719e5a14c1',\n      'KYT0bf1c35032a71a14c2f719e5a14c1dsjkjkjkjkkjk',\n      'q94375dj93458w34',\n      '39485729348',\n      '%&FHKJFvk',\n    ];\n\n    testHash(algorithm as ValidatorJS.HashAlgorithm, validValues, invalidValues);\n  }\n\n  for (const algorithm of ['sha256']) {\n    const validValues = [\n      '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824',\n      '1d996e033d612d9af2b44b70061ee0e868bfd14c2dd90b129e1edeb7953e7985',\n      '80f70bfeaed5886e33536bcfa8c05c60afef5a0e48f699a7912d5e399cdcc441',\n      '579282cfb65ca1f109b78536effaf621b853c9f7079664a3fbe2b519f435898c',\n    ];\n    const invalidValues = [\n      undefined,\n      null,\n      'KYT0bf1c35032a71a14c2f719e5a14c1',\n      'KYT0bf1c35032a71a14c2f719e5a14c1dsjkjkjkjkkjk',\n      'q94375dj93458w34',\n      '39485729348',\n      '%&FHKJFvk',\n    ];\n\n    testHash(algorithm as ValidatorJS.HashAlgorithm, validValues, invalidValues);\n  }\n\n  for (const algorithm of ['sha384']) {\n    const validValues = [\n      '3fed1f814d28dc5d63e313f8a601ecc4836d1662a19365cbdcf6870f6b56388850b58043f7ebf2418abb8f39c3a42e31',\n      'b330f4e575db6e73500bd3b805db1a84b5a034e5d21f0041d91eec85af1dfcb13e40bb1c4d36a72487e048ac6af74b58',\n      'bf547c3fc5841a377eb1519c2890344dbab15c40ae4150b4b34443d2212e5b04aa9d58865bf03d8ae27840fef430b891',\n      'fc09a3d11368386530f985dacddd026ae1e44e0e297c805c3429d50744e6237eb4417c20ffca8807b071823af13a3f65',\n    ];\n    const invalidValues = [\n      undefined,\n      null,\n      'KYT0bf1c35032a71a14c2f719e5a14c1',\n      'KYT0bf1c35032a71a14c2f719e5a14c1dsjkjkjkjkkjk',\n      'q94375dj93458w34',\n      '39485729348',\n      '%&FHKJFvk',\n    ];\n\n    testHash(algorithm as ValidatorJS.HashAlgorithm, validValues, invalidValues);\n  }\n\n  for (const algorithm of ['sha512']) {\n    const validValues = [\n      '9b71d224bd62f3785d96d46ad3ea3d73319bfbc2890caadae2dff72519673ca72323c3d99ba5c11d7c7acc6e14b8c5da0c4663475c2e5c3adef46f73bcdec043',\n      '83c586381bf5ba94c8d9ba8b6b92beb0997d76c257708742a6c26d1b7cbb9269af92d527419d5b8475f2bb6686d2f92a6649b7f174c1d8306eb335e585ab5049',\n      '45bc5fa8cb45ee408c04b6269e9f1e1c17090c5ce26ffeeda2af097735b29953ce547e40ff3ad0d120e5361cc5f9cee35ea91ecd4077f3f589b4d439168f91b9',\n      '432ac3d29e4f18c7f604f7c3c96369a6c5c61fc09bf77880548239baffd61636d42ed374f41c261e424d20d98e320e812a6d52865be059745fdb2cb20acff0ab',\n    ];\n    const invalidValues = [\n      undefined,\n      null,\n      'KYT0bf1c35032a71a14c2f719e5a14c1',\n      'KYT0bf1c35032a71a14c2f719e5a14c1dsjkjkjkjkkjk',\n      'q94375dj93458w34',\n      '39485729348',\n      '%&FHKJFvk',\n    ];\n\n    testHash(algorithm as ValidatorJS.HashAlgorithm, validValues, invalidValues);\n  }\n\n  for (const algorithm of ['tiger192']) {\n    const validValues = [\n      '6281a1f098c5e7290927ed09150d43ff3990a0fe1a48267c',\n      '56268f7bc269cf1bc83d3ce42e07a85632394737918f4760',\n      '46fc0125a148788a3ac1d649566fc04eb84a746f1a6e4fa7',\n      '7731ea1621ae99ea3197b94583d034fdbaa4dce31a67404a',\n    ];\n    const invalidValues = [\n      undefined,\n      null,\n      'KYT0bf1c35032a71a14c2f719e5a14c1',\n      'KYT0bf1c35032a71a14c2f719e5a14c1dsjkjkjkjkkjk',\n      'q94375dj93458w34',\n      '39485729348',\n      '%&FHKJFvk',\n    ];\n\n    testHash(algorithm as ValidatorJS.HashAlgorithm, validValues, invalidValues);\n  }\n});\n\ndescribe('IsISSN', () => {\n  const validValues = ['0378-5955', '0000-0000', '2434-561X', '2434-561x', '01896016', '20905076'];\n  const invalidValues = [\n    null,\n    undefined,\n    '0378-5954',\n    '0000-0001',\n    '0378-123',\n    '037-1234',\n    '0',\n    '2434-561c',\n    '1684-5370',\n    '19960791',\n    '',\n  ];\n\n  class MyClass {\n    @IsISSN()\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isISSN(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isISSN(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isISSN';\n    const message = 'someProperty must be a ISSN';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('IsISSN with options', () => {\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  const options = { case_sensitive: true, require_hyphen: true };\n  const validValues = ['2434-561X', '0378-5955'];\n  const invalidValues = [null, undefined, '2434-561x', '2434561X', '2434561x', '03785955'];\n\n  class MyClass {\n    @IsISSN(options)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isISSN(value, options)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isISSN(value, options)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isISSN';\n    const message = 'someProperty must be a ISSN';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('ArrayContains', () => {\n  const constraint = ['superman'];\n  const validValues = [\n    ['world', 'hello', 'superman'],\n    ['world', 'superman', 'hello'],\n    ['superman', 'world', 'hello'],\n  ];\n  const invalidValues = [null, undefined, ['world', 'hello']];\n\n  class MyClass {\n    @ArrayContains(constraint)\n    someProperty: string[];\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(arrayContains(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(arrayContains(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'arrayContains';\n    const message = 'someProperty must contain ' + constraintToString(constraint) + ' values';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('ArrayNotContains', () => {\n  const constraint = ['superman'];\n  const validValues = [['world', 'hello']];\n  const invalidValues = [\n    null,\n    undefined,\n    ['world', 'hello', 'superman'],\n    ['world', 'superman', 'hello'],\n    ['superman', 'world', 'hello'],\n  ];\n\n  class MyClass {\n    @ArrayNotContains(constraint)\n    someProperty: string[];\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(arrayNotContains(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(arrayNotContains(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'arrayNotContains';\n    const message = 'someProperty should not contain ' + constraintToString(constraint) + ' values';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('ArrayNotEmpty', () => {\n  const validValues = [\n    [0],\n    [''],\n    [null],\n    [undefined],\n    [false],\n    ['world', 'hello', 'superman'],\n    ['world', 'superman', 'hello'],\n    ['superman', 'world', 'hello'],\n  ];\n  const invalidValues: any[] = [null, undefined, []];\n\n  class MyClass {\n    @ArrayNotEmpty()\n    someProperty: string[];\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(arrayNotEmpty(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(arrayNotEmpty(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'arrayNotEmpty';\n    const message = 'someProperty should not be empty';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('ArrayMinSize', () => {\n  const constraint = 2;\n  const validValues = [['world', 'hello']];\n  const invalidValues = [null, undefined, ['hi']];\n\n  class MyClass {\n    @ArrayMinSize(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(arrayMinSize(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(arrayMinSize(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'arrayMinSize';\n    const message = 'someProperty must contain at least ' + constraintToString(constraint) + ' elements';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('ArrayMaxSize', () => {\n  const constraint = 2;\n  const validValues = [['world', 'hello']];\n  const invalidValues = [null, undefined, ['hi', 'hello', 'javascript']];\n\n  class MyClass {\n    @ArrayMaxSize(constraint)\n    someProperty: string;\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(arrayMaxSize(value, constraint)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(arrayMaxSize(value, constraint)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'arrayMaxSize';\n    const message = 'someProperty must contain not more than ' + constraintToString(constraint) + ' elements';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('ArrayUnique', () => {\n  const validValues = [\n    ['world', 'hello', 'superman'],\n    ['world', 'superman', 'hello'],\n    ['superman', 'world', 'hello'],\n    ['1', '2', null, undefined],\n  ];\n  const invalidValues: any[] = [\n    null,\n    undefined,\n    ['world', 'hello', 'hello'],\n    ['world', 'hello', 'world'],\n    ['1', '1', '1'],\n  ];\n\n  class MyClass {\n    @ArrayUnique()\n    someProperty: string[];\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(arrayUnique(value)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(arrayUnique(value)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'arrayUnique';\n    const message = \"All someProperty's elements must be unique\";\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('ArrayUnique with identifier', () => {\n  const identifier = o => o.name;\n  const validValues = [\n    ['world', 'hello', 'superman'],\n    ['world', 'superman', 'hello'],\n    ['superman', 'world', 'hello'],\n    ['1', '2', null, undefined],\n  ].map(list => list.map(name => ({ name })));\n  const invalidValues: any[] = [\n    null,\n    undefined,\n    ['world', 'hello', 'hello'],\n    ['world', 'hello', 'world'],\n    ['1', '1', '1'],\n  ].map(list => list?.map(name => (name != null ? { name } : name)));\n\n  class MyClass {\n    @ArrayUnique(identifier)\n    someProperty: { name: string }[];\n  }\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(arrayUnique(value, identifier)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(arrayUnique(value, identifier)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'arrayUnique';\n    const message = \"All someProperty's elements must be unique\";\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n\ndescribe('isInstance', () => {\n  class MySubClass {\n    // Empty\n  }\n\n  class WrongSubClass {\n    // Empty\n  }\n\n  class MyClass {\n    @IsInstance(MySubClass)\n    someProperty: MySubClass;\n  }\n\n  const validValues = [new MySubClass()];\n  const invalidValues = [null, undefined, 15, 'something', new WrongSubClass(), (): null => null];\n\n  it('should not fail if validator.validate said that its valid', () => {\n    return checkValidValues(new MyClass(), validValues);\n  });\n\n  it('should fail if validator.validate said that its invalid', () => {\n    return checkInvalidValues(new MyClass(), invalidValues);\n  });\n\n  it('should not fail if method in validator said that its valid', () => {\n    validValues.forEach(value => expect(isInstance(value, MySubClass)).toBeTruthy());\n  });\n\n  it('should fail if method in validator said that its invalid', () => {\n    invalidValues.forEach(value => expect(isInstance(value, MySubClass)).toBeFalsy());\n  });\n\n  it('should return error object with proper data', () => {\n    const validationType = 'isInstance';\n    const message = 'someProperty must be an instance of MySubClass';\n    return checkReturnedError(new MyClass(), invalidValues, validationType, message);\n  });\n});\n"],
  "mappings": "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",
  "names": ["validator", "MyEnum", "MyStringEnum"]
}
