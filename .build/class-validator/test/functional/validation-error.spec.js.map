{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/validation-error.spec.ts"],
  "sourcesContent": ["import { IsString, IsUrl, IsOptional, ValidateNested, MinLength } from '../../src/decorator/decorators';\nimport { Validator } from '../../src/validation/Validator';\n\nconst validator = new Validator();\n\n/**\n * TODO: needs to split these test into\n *   - testing basic toString\n *   - testing nested objects\n *   - testing arrays\n *   - testing color codes?\n */\ndescribe('ValidationError', () => {\n  it('should correctly log error message without ANSI escape codes', async () => {\n    class NestedClass {\n      @IsString()\n      public name: string;\n\n      @IsUrl()\n      public url: string;\n\n      @IsOptional()\n      @ValidateNested()\n      public insideNested: NestedClass;\n\n      constructor(url: string, name: any, insideNested?: NestedClass) {\n        this.url = url;\n        this.name = name;\n        this.insideNested = insideNested;\n      }\n    }\n\n    class RootClass {\n      @IsString()\n      @MinLength(15)\n      public title: string;\n\n      @ValidateNested()\n      public nestedObj: NestedClass;\n\n      @ValidateNested({ each: true })\n      public nestedArr: NestedClass[];\n\n      constructor() {\n        this.title = 5 as any;\n        this.nestedObj = new NestedClass('invalid-url', 5, new NestedClass('invalid-url', 5));\n        this.nestedArr = [new NestedClass('invalid-url', 5), new NestedClass('invalid-url', 5)];\n      }\n    }\n\n    const validationErrors = await validator.validate(new RootClass());\n    expect(validationErrors[0].toString()).toEqual(\n      'An instance of RootClass has failed the validation:\\n' +\n        ' - property title has failed the following constraints: minLength, isString \\n'\n    );\n    expect(validationErrors[1].toString()).toEqual(\n      'An instance of RootClass has failed the validation:\\n' +\n        ' - property nestedObj.name has failed the following constraints: isString \\n' +\n        ' - property nestedObj.url has failed the following constraints: isUrl \\n' +\n        ' - property nestedObj.insideNested.name has failed the following constraints: isString \\n' +\n        ' - property nestedObj.insideNested.url has failed the following constraints: isUrl \\n'\n    );\n    expect(validationErrors[2].toString()).toEqual(\n      'An instance of RootClass has failed the validation:\\n' +\n        ' - property nestedArr[0].name has failed the following constraints: isString \\n' +\n        ' - property nestedArr[0].url has failed the following constraints: isUrl \\n' +\n        ' - property nestedArr[1].name has failed the following constraints: isString \\n' +\n        ' - property nestedArr[1].url has failed the following constraints: isUrl \\n'\n    );\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;AAAA,wBAAuE;AACvE,uBAA0B;AAE1B,MAAM,YAAY,IAAI,2BAAU;AAShC,SAAS,mBAAmB,MAAM;AAChC,KAAG,gEAAgE,YAAY;AAC7E,UAAM,YAAY;AAAA,MAWhB,YAAY,KAAa,MAAW,cAA4B;AAC9D,aAAK,MAAM;AACX,aAAK,OAAO;AACZ,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AAdS;AAAA,UADN,4BAAS;AAAA,OADN,YAEG;AAGA;AAAA,UADN,yBAAM;AAAA,OAJH,YAKG;AAIA;AAAA,UAFN,8BAAW;AAAA,UACX,kCAAe;AAAA,OARZ,YASG;AAST,UAAM,UAAU;AAAA,MAWd,cAAc;AACZ,aAAK,QAAQ;AACb,aAAK,YAAY,IAAI,YAAY,eAAe,GAAG,IAAI,YAAY,eAAe,CAAC,CAAC;AACpF,aAAK,YAAY,CAAC,IAAI,YAAY,eAAe,CAAC,GAAG,IAAI,YAAY,eAAe,CAAC,CAAC;AAAA,MACxF;AAAA,IACF;AAbS;AAAA,UAFN,4BAAS;AAAA,UACT,6BAAU,EAAE;AAAA,OAFT,UAGG;AAGA;AAAA,UADN,kCAAe;AAAA,OALZ,UAMG;AAGA;AAAA,UADN,kCAAe,EAAE,MAAM,KAAK,CAAC;AAAA,OAR1B,UASG;AAST,UAAM,mBAAmB,MAAM,UAAU,SAAS,IAAI,UAAU,CAAC;AACjE,WAAO,iBAAiB,GAAG,SAAS,CAAC,EAAE;AAAA,MACrC;AAAA,IAEF;AACA,WAAO,iBAAiB,GAAG,SAAS,CAAC,EAAE;AAAA,MACrC;AAAA,IAKF;AACA,WAAO,iBAAiB,GAAG,SAAS,CAAC,EAAE;AAAA,MACrC;AAAA,IAKF;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
