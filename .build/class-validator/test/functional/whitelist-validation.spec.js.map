{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/whitelist-validation.spec.ts"],
  "sourcesContent": ["import { Allow, IsDefined, Min } from '../../src/decorator/decorators';\nimport { Validator } from '../../src/validation/Validator';\nimport { ValidationTypes } from '../../src';\n\nconst validator = new Validator();\n\ndescribe('whitelist validation', () => {\n  it('should strip non whitelisted properties, but leave whitelisted untouched', () => {\n    class MyClass {\n      @IsDefined()\n      title: string;\n\n      @Min(0)\n      views: number;\n    }\n\n    const model: any = new MyClass();\n\n    model.title = 'hello';\n    model.views = 56;\n    model.unallowedProperty = 42;\n    return validator.validate(model, { whitelist: true }).then(errors => {\n      expect(errors.length).toEqual(0);\n      expect(model.unallowedProperty).toBeUndefined();\n      expect(model.title).toEqual('hello');\n      expect(model.views).toEqual(56);\n    });\n  });\n\n  it('should be able to whitelist with @Allow', () => {\n    class MyClass {\n      @Allow()\n      views: number;\n    }\n\n    const model: any = new MyClass();\n\n    model.views = 420;\n    model.unallowedProperty = 'non-whitelisted';\n\n    return validator.validate(model, { whitelist: true }).then(errors => {\n      expect(errors.length).toEqual(0);\n      expect(model.unallowedProperty).toBeUndefined();\n      expect(model.views).toEqual(420);\n    });\n  });\n\n  it('should throw an error when forbidNonWhitelisted flag is set', () => {\n    class MyClass {}\n\n    const model: any = new MyClass();\n\n    model.unallowedProperty = 'non-whitelisted';\n\n    return validator.validate(model, { whitelist: true, forbidNonWhitelisted: true }).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].target).toEqual(model);\n      expect(errors[0].property).toEqual('unallowedProperty');\n      expect(errors[0].constraints).toHaveProperty(ValidationTypes.WHITELIST);\n      expect(() => errors[0].toString()).not.toThrowError();\n    });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;AAAA,wBAAsC;AACtC,uBAA0B;AAC1B,iBAAgC;AAEhC,MAAM,YAAY,IAAI,2BAAU;AAEhC,SAAS,wBAAwB,MAAM;AACrC,KAAG,4EAA4E,MAAM;AACnF,UAAM,QAAQ;AAAA,IAMd;AAJE;AAAA,UADC,6BAAU;AAAA,OADP,QAEJ;AAGA;AAAA,UADC,uBAAI,CAAC;AAAA,OAJF,QAKJ;AAGF,UAAM,QAAa,IAAI,QAAQ;AAE/B,UAAM,QAAQ;AACd,UAAM,QAAQ;AACd,UAAM,oBAAoB;AAC1B,WAAO,UAAU,SAAS,OAAO,EAAE,WAAW,KAAK,CAAC,EAAE,KAAK,YAAU;AACnE,aAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,aAAO,MAAM,iBAAiB,EAAE,cAAc;AAC9C,aAAO,MAAM,KAAK,EAAE,QAAQ,OAAO;AACnC,aAAO,MAAM,KAAK,EAAE,QAAQ,EAAE;AAAA,IAChC,CAAC;AAAA,EACH,CAAC;AAED,KAAG,2CAA2C,MAAM;AAClD,UAAM,QAAQ;AAAA,IAGd;AADE;AAAA,UADC,yBAAM;AAAA,OADH,QAEJ;AAGF,UAAM,QAAa,IAAI,QAAQ;AAE/B,UAAM,QAAQ;AACd,UAAM,oBAAoB;AAE1B,WAAO,UAAU,SAAS,OAAO,EAAE,WAAW,KAAK,CAAC,EAAE,KAAK,YAAU;AACnE,aAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,aAAO,MAAM,iBAAiB,EAAE,cAAc;AAC9C,aAAO,MAAM,KAAK,EAAE,QAAQ,GAAG;AAAA,IACjC,CAAC;AAAA,EACH,CAAC;AAED,KAAG,+DAA+D,MAAM;AACtE,UAAM,QAAQ;AAAA,IAAC;AAEf,UAAM,QAAa,IAAI,QAAQ;AAE/B,UAAM,oBAAoB;AAE1B,WAAO,UAAU,SAAS,OAAO,EAAE,WAAW,MAAM,sBAAsB,KAAK,CAAC,EAAE,KAAK,YAAU;AAC/F,aAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,aAAO,OAAO,GAAG,MAAM,EAAE,QAAQ,KAAK;AACtC,aAAO,OAAO,GAAG,QAAQ,EAAE,QAAQ,mBAAmB;AACtD,aAAO,OAAO,GAAG,WAAW,EAAE,eAAe,2BAAgB,SAAS;AACtE,aAAO,MAAM,OAAO,GAAG,SAAS,CAAC,EAAE,IAAI,aAAa;AAAA,IACtD,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
