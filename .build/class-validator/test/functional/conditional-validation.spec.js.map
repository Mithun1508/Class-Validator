{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/conditional-validation.spec.ts"],
  "sourcesContent": ["import { IsNotEmpty, ValidateIf, IsOptional, Equals } from '../../src/decorator/decorators';\nimport { Validator } from '../../src/validation/Validator';\n\nconst validator = new Validator();\n\ndescribe('conditional validation', () => {\n  it(\"shouldn't validate a property when the condition is false\", () => {\n    expect.assertions(1);\n\n    class MyClass {\n      @ValidateIf(o => false)\n      @IsNotEmpty()\n      title: string;\n    }\n\n    const model = new MyClass();\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(0);\n    });\n  });\n\n  it('should validate a property when the condition is true', () => {\n    expect.assertions(5);\n\n    class MyClass {\n      @ValidateIf(o => true)\n      @IsNotEmpty()\n      title: string = '';\n    }\n\n    const model = new MyClass();\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].target).toEqual(model);\n      expect(errors[0].property).toEqual('title');\n      expect(errors[0].constraints).toEqual({ isNotEmpty: 'title should not be empty' });\n      expect(errors[0].value).toEqual('');\n    });\n  });\n\n  it('should pass the object being validated to the condition function', () => {\n    expect.assertions(3);\n\n    class MyClass {\n      @ValidateIf(o => {\n        expect(o).toBeInstanceOf(MyClass);\n        expect(o.title).toEqual('title');\n        return true;\n      })\n      @IsNotEmpty()\n      title: string = 'title';\n    }\n\n    const model = new MyClass();\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(0);\n    });\n  });\n\n  it('should validate a property when value is empty', () => {\n    expect.assertions(5);\n\n    class MyClass {\n      @IsOptional()\n      @Equals('test')\n      title: string = '';\n    }\n\n    const model = new MyClass();\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].target).toEqual(model);\n      expect(errors[0].property).toEqual('title');\n      expect(errors[0].constraints).toEqual({ equals: 'title must be equal to test' });\n      expect(errors[0].value).toEqual('');\n    });\n  });\n\n  it('should validate a property when value is supplied', () => {\n    class MyClass {\n      @IsOptional()\n      @Equals('test')\n      title: string = 'bad_value';\n    }\n\n    const model = new MyClass();\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].target).toEqual(model);\n      expect(errors[0].property).toEqual('title');\n      expect(errors[0].constraints).toEqual({ equals: 'title must be equal to test' });\n      expect(errors[0].value).toEqual('bad_value');\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
