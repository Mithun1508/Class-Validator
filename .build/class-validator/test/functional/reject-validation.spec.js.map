{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/reject-validation.spec.ts"],
  "sourcesContent": ["import { ValidationError } from './../../src/validation/ValidationError';\nimport { Contains } from '../../src/decorator/decorators';\nimport { Validator } from '../../src/validation/Validator';\n\nclass MyClass {\n  @Contains('hello', {\n    message: '$value is not valid. Your string must contain a hello word',\n  })\n  someProperty: string;\n}\n\ndescribe('validateOrReject()', () => {\n  let validator: Validator;\n  let model: MyClass;\n\n  beforeEach(() => {\n    validator = new Validator();\n    model = new MyClass();\n  });\n\n  it('should resolve promise when no error', () => {\n    expect.assertions(1);\n    model.someProperty = 'hello world';\n    return validator.validateOrReject(model).then(args => {\n      expect(args).toBeUndefined();\n    });\n  });\n\n  it('should reject promise on error', () => {\n    expect.assertions(2);\n    model.someProperty = 'hell no world';\n    return validator.validateOrReject(model).catch((errors: ValidationError[]) => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].constraints).toEqual({\n        contains: 'hell no world is not valid. Your string must contain a hello word',\n      });\n    });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;AACA,wBAAyB;AACzB,uBAA0B;AAE1B,MAAM,QAAQ;AAKd;AADE;AAAA,MAHC,4BAAS,SAAS;AAAA,IACjB,SAAS;AAAA,EACX,CAAC;AAAA,GAHG,QAIJ;AAGF,SAAS,sBAAsB,MAAM;AACnC,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAM;AACf,gBAAY,IAAI,2BAAU;AAC1B,YAAQ,IAAI,QAAQ;AAAA,EACtB,CAAC;AAED,KAAG,wCAAwC,MAAM;AAC/C,WAAO,WAAW,CAAC;AACnB,UAAM,eAAe;AACrB,WAAO,UAAU,iBAAiB,KAAK,EAAE,KAAK,UAAQ;AACpD,aAAO,IAAI,EAAE,cAAc;AAAA,IAC7B,CAAC;AAAA,EACH,CAAC;AAED,KAAG,kCAAkC,MAAM;AACzC,WAAO,WAAW,CAAC;AACnB,UAAM,eAAe;AACrB,WAAO,UAAU,iBAAiB,KAAK,EAAE,MAAM,CAAC,WAA8B;AAC5E,aAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,aAAO,OAAO,GAAG,WAAW,EAAE,QAAQ;AAAA,QACpC,UAAU;AAAA,MACZ,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
