{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/promise-validation.spec.ts"],
  "sourcesContent": ["import { Contains, IsDefined, MinLength, ValidateNested, ValidatePromise } from '../../src/decorator/decorators';\nimport { Validator } from '../../src/validation/Validator';\nimport { ValidationTypes } from '../../src/validation/ValidationTypes';\n\nconst validator = new Validator();\n\ndescribe('promise validation', () => {\n  it('should not validate missing nested objects', () => {\n    expect.assertions(4);\n\n    class MySubClass {\n      @MinLength(5)\n      name: string;\n    }\n\n    class MyClass {\n      @Contains('hello')\n      title: string;\n\n      @ValidatePromise()\n      @ValidateNested()\n      @IsDefined()\n      mySubClass: Promise<MySubClass>;\n    }\n\n    const model: any = new MyClass();\n    model.title = 'helo';\n\n    return validator.validate(model).then(errors => {\n      expect(errors[1].target).toEqual(model);\n      expect(errors[1].value).toBeUndefined();\n      expect(errors[1].property).toEqual('mySubClass');\n      expect(errors[1].constraints).toEqual({ isDefined: 'mySubClass should not be null or undefined' });\n    });\n  });\n\n  it('should validate nested objects', () => {\n    expect.assertions(24);\n\n    class MySubClass {\n      @MinLength(5)\n      name: string;\n    }\n\n    class MyClass {\n      @Contains('hello')\n      title: string;\n\n      @ValidatePromise()\n      @ValidateNested()\n      mySubClass: Promise<MySubClass>;\n\n      @ValidatePromise()\n      @ValidateNested()\n      mySubClasses: Promise<MySubClass[]>;\n    }\n\n    const model = new MyClass();\n    model.title = 'helo world';\n    const mySubClass = new MySubClass();\n    mySubClass.name = 'my';\n    model.mySubClass = Promise.resolve(mySubClass);\n    const mySubClasses = [new MySubClass(), new MySubClass()];\n    mySubClasses[0].name = 'my';\n    mySubClasses[1].name = 'not-short';\n    model.mySubClasses = Promise.resolve(mySubClasses);\n    return validator.validate(model).then(errors => {\n      return Promise.all([model.mySubClass, model.mySubClasses]).then(([modelMySubClass, modelMySubClasses]) => {\n        expect(errors.length).toEqual(3);\n\n        expect(errors[0].target).toEqual(model);\n        expect(errors[0].property).toEqual('title');\n        expect(errors[0].constraints).toEqual({ contains: 'title must contain a hello string' });\n        expect(errors[0].value).toEqual('helo world');\n\n        expect(errors[1].target).toEqual(model);\n        expect(errors[1].property).toEqual('mySubClass');\n        expect(errors[1].value).toEqual(modelMySubClass);\n        expect(errors[1].constraints).toBeUndefined();\n        const subError1 = errors[1].children[0];\n        expect(subError1.target).toEqual(modelMySubClass);\n        expect(subError1.property).toEqual('name');\n        expect(subError1.constraints).toEqual({ minLength: 'name must be longer than or equal to 5 characters' });\n        expect(subError1.value).toEqual('my');\n\n        expect(errors[2].target).toEqual(model);\n        expect(errors[2].property).toEqual('mySubClasses');\n        expect(errors[2].value).toEqual(modelMySubClasses);\n        expect(errors[2].constraints).toBeUndefined();\n        const subError2 = errors[2].children[0];\n        expect(subError2.target).toEqual(modelMySubClasses);\n        expect(subError2.value).toEqual(modelMySubClasses[0]);\n        expect(subError2.property).toEqual('0');\n        const subSubError = subError2.children[0];\n        expect(subSubError.target).toEqual(modelMySubClasses[0]);\n        expect(subSubError.property).toEqual('name');\n        expect(subSubError.constraints).toEqual({ minLength: 'name must be longer than or equal to 5 characters' });\n        expect(subSubError.value).toEqual('my');\n      });\n    });\n  });\n\n  it('should validate when nested is not object', () => {\n    expect.assertions(4);\n\n    class MySubClass {\n      @MinLength(5)\n      name: string;\n    }\n\n    class MyClass {\n      @ValidatePromise()\n      @ValidateNested()\n      mySubClass: MySubClass;\n    }\n\n    const model = new MyClass();\n    model.mySubClass = 'invalidnested object' as any;\n\n    return validator.validate(model).then(errors => {\n      expect(errors[0].target).toEqual(model);\n      expect(errors[0].property).toEqual('mySubClass');\n      expect(errors[0].children.length).toEqual(1);\n\n      const subError = errors[0].children[0];\n      expect(subError.constraints).toEqual({\n        [ValidationTypes.NESTED_VALIDATION]: 'nested property mySubClass must be either object or array',\n      });\n    });\n  });\n\n  it('should validate array promise', () => {\n    expect.assertions(5);\n\n    class MyClass {\n      @ValidatePromise()\n      @MinLength(2)\n      arrProperty: Promise<string[]>;\n    }\n\n    const model = new MyClass();\n    model.arrProperty = Promise.resolve(['one']);\n\n    return validator.validate(model).then(errors => {\n      return Promise.all([model.arrProperty]).then(([modelArrProperty]) => {\n        expect(errors.length).toEqual(1);\n\n        expect(errors[0].target).toEqual(model);\n        expect(errors[0].property).toEqual('arrProperty');\n        expect(errors[0].constraints).toEqual({\n          minLength: 'arrProperty must be longer than or equal to 2 characters',\n        });\n        expect(errors[0].value).toEqual(modelArrProperty);\n      });\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
