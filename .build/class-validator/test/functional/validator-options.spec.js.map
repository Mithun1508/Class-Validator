{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/validator-options.spec.ts"],
  "sourcesContent": ["import { IsNotEmpty } from '../../src/decorator/decorators';\nimport { Validator } from '../../src/validation/Validator';\n\nconst validator = new Validator();\n\ndescribe('validator options', () => {\n  it('should not return target in validation error if validationError: { target: false } is set', () => {\n    class MyClass {\n      @IsNotEmpty()\n      title: string = '';\n      isActive: boolean;\n    }\n\n    const model = new MyClass();\n    model.title = '';\n    return validator\n      .validate(model, { skipMissingProperties: true, validationError: { target: false } })\n      .then(errors => {\n        expect(errors.length).toEqual(1);\n        expect(errors[0].target).toBeUndefined();\n        expect(errors[0].property).toEqual('title');\n        expect(errors[0].constraints).toEqual({ isNotEmpty: 'title should not be empty' });\n        expect(errors[0].value).toEqual('');\n      });\n  });\n\n  it('should returns error on unknown objects if forbidUnknownValues is true', function () {\n    const anonymousObject = { badKey: 'This should not pass.' };\n\n    return validator.validate(anonymousObject, { forbidUnknownValues: true }).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].target).toEqual(anonymousObject);\n      expect(errors[0].property).toEqual(undefined);\n      expect(errors[0].value).toEqual(undefined);\n      expect(errors[0].children).toBeInstanceOf(Array);\n      expect(errors[0].constraints).toEqual({ unknownValue: 'an unknown value was passed to the validate function' });\n    });\n  });\n\n  it('should return no error on unknown objects if forbidUnknownValues is false', function () {\n    const anonymousObject = { badKey: 'This should not pass.' };\n\n    return validator.validate(anonymousObject, { forbidUnknownValues: false }).then(errors => {\n      expect(errors.length).toEqual(0);\n    });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;AAAA,wBAA2B;AAC3B,uBAA0B;AAE1B,MAAM,YAAY,IAAI,2BAAU;AAEhC,SAAS,qBAAqB,MAAM;AAClC,KAAG,6FAA6F,MAAM;AACpG,UAAM,QAAQ;AAAA,MAAd;AAEE,qBAAgB;AAAA;AAAA,IAElB;AAFE;AAAA,UADC,8BAAW;AAAA,OADR,QAEJ;AAIF,UAAM,QAAQ,IAAI,QAAQ;AAC1B,UAAM,QAAQ;AACd,WAAO,UACJ,SAAS,OAAO,EAAE,uBAAuB,MAAM,iBAAiB,EAAE,QAAQ,MAAM,EAAE,CAAC,EACnF,KAAK,YAAU;AACd,aAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,aAAO,OAAO,GAAG,MAAM,EAAE,cAAc;AACvC,aAAO,OAAO,GAAG,QAAQ,EAAE,QAAQ,OAAO;AAC1C,aAAO,OAAO,GAAG,WAAW,EAAE,QAAQ,EAAE,YAAY,4BAA4B,CAAC;AACjF,aAAO,OAAO,GAAG,KAAK,EAAE,QAAQ,EAAE;AAAA,IACpC,CAAC;AAAA,EACL,CAAC;AAED,KAAG,0EAA0E,WAAY;AACvF,UAAM,kBAAkB,EAAE,QAAQ,wBAAwB;AAE1D,WAAO,UAAU,SAAS,iBAAiB,EAAE,qBAAqB,KAAK,CAAC,EAAE,KAAK,YAAU;AACvF,aAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,aAAO,OAAO,GAAG,MAAM,EAAE,QAAQ,eAAe;AAChD,aAAO,OAAO,GAAG,QAAQ,EAAE,QAAQ,MAAS;AAC5C,aAAO,OAAO,GAAG,KAAK,EAAE,QAAQ,MAAS;AACzC,aAAO,OAAO,GAAG,QAAQ,EAAE,eAAe,KAAK;AAC/C,aAAO,OAAO,GAAG,WAAW,EAAE,QAAQ,EAAE,cAAc,uDAAuD,CAAC;AAAA,IAChH,CAAC;AAAA,EACH,CAAC;AAED,KAAG,6EAA6E,WAAY;AAC1F,UAAM,kBAAkB,EAAE,QAAQ,wBAAwB;AAE1D,WAAO,UAAU,SAAS,iBAAiB,EAAE,qBAAqB,MAAM,CAAC,EAAE,KAAK,YAAU;AACxF,aAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAAA,IACjC,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
