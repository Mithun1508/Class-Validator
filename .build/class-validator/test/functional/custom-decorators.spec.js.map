{
  "version": 3,
  "sources": ["../../../../class-validator/test/functional/custom-decorators.spec.ts"],
  "sourcesContent": ["import { Validator } from '../../src/validation/Validator';\nimport { ValidationArguments } from '../../src/validation/ValidationArguments';\nimport { registerDecorator } from '../../src/register-decorator';\nimport { ValidationOptions } from '../../src/decorator/ValidationOptions';\nimport { ValidatorConstraint } from '../../src/decorator/decorators';\nimport { ValidatorConstraintInterface } from '../../src/validation/ValidatorConstraintInterface';\n\nconst validator = new Validator();\n\ndescribe('decorator with inline validation', () => {\n  function IsLongerThan(property: string, validationOptions?: ValidationOptions) {\n    return function (object: object, propertyName: string): void {\n      registerDecorator({\n        target: object.constructor,\n        propertyName: propertyName,\n        options: validationOptions,\n        constraints: [property],\n        name: 'isLongerThan',\n        validator: {\n          validate(value: any, args: ValidationArguments): Promise<boolean> | boolean {\n            const [relatedPropertyName] = args.constraints;\n            const relatedValue = (args.object as any)[relatedPropertyName];\n            if (relatedValue === undefined || relatedValue === null) {\n              return true;\n            }\n\n            const result =\n              typeof value === 'string' && typeof relatedValue === 'string' && value.length > relatedValue.length;\n\n            const asPromise = validationOptions && validationOptions.context && validationOptions.context.promise;\n\n            return asPromise ? Promise.resolve(result) : result;\n          },\n        },\n      });\n    };\n  }\n\n  class MyClass {\n    @IsLongerThan('lastName', {\n      context: { foo: 'bar' },\n      message: '$property must be longer then $constraint1. Given value: $value',\n    })\n    firstName: string;\n    lastName: string;\n  }\n\n  class MyClassWithAsyncValidator {\n    @IsLongerThan('lastName', {\n      context: { foo: 'bar', promise: true },\n      message: '$property must be longer then $constraint1. Given value: $value',\n    })\n    firstName: string;\n    lastName: string;\n  }\n\n  it('if firstName is not empty and lastLame is empty then it should succeed', () => {\n    expect.assertions(1);\n    const model = new MyClass();\n    model.firstName = 'hell no world';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(0);\n    });\n  });\n\n  it('if firstName is empty and lastLame is not empty then it should fail', () => {\n    expect.assertions(2);\n    const model = new MyClass();\n    model.firstName = '';\n    model.lastName = 'Kim';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].constraints).toEqual({ isLongerThan: 'firstName must be longer then lastName. Given value: ' });\n    });\n  });\n\n  it('if firstName is shorter then lastLame then it should fail', () => {\n    expect.assertions(2);\n    const model = new MyClass();\n    model.firstName = 'Li';\n    model.lastName = 'Kim';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].constraints).toEqual({\n        isLongerThan: 'firstName must be longer then lastName. Given value: Li',\n      });\n    });\n  });\n\n  it('should include context', () => {\n    expect.assertions(4);\n    const model = new MyClass();\n    const asyncModel = new MyClassWithAsyncValidator();\n    model.firstName = asyncModel.firstName = 'Paul';\n    model.lastName = asyncModel.lastName = 'Walker';\n\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].contexts).toEqual({ isLongerThan: { foo: 'bar' } });\n      return validator.validate(asyncModel).then(errors => {\n        expect(errors.length).toEqual(1);\n        expect(errors[0].contexts).toHaveProperty('isLongerThan.foo', 'bar');\n      });\n    });\n  });\n});\n\ndescribe('decorator with default message', () => {\n  function IsLonger(property: string, validationOptions?: ValidationOptions) {\n    return function (object: object, propertyName: string): void {\n      registerDecorator({\n        target: object.constructor,\n        propertyName: propertyName,\n        options: validationOptions,\n        constraints: [property],\n        name: 'isLonger',\n        validator: {\n          validate(value: any, args: ValidationArguments): boolean {\n            const [relatedPropertyName] = args.constraints;\n            const relatedValue = (args.object as any)[relatedPropertyName];\n            if (relatedValue === undefined || relatedValue === null) return true;\n\n            return typeof value === 'string' && typeof relatedValue === 'string' && value.length > relatedValue.length;\n          },\n          defaultMessage(args: ValidationArguments): string {\n            return args.property + ' must be longer then ' + args.constraints[0];\n          },\n        },\n      });\n    };\n  }\n\n  class SecondClass {\n    @IsLonger('lastName')\n    firstName: string;\n    lastName: string;\n  }\n\n  it('if firstName is not empty and lastLame is empty then it should succeed', () => {\n    expect.assertions(1);\n    const model = new SecondClass();\n    model.firstName = 'hell no world';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(0);\n    });\n  });\n\n  it('if firstName is empty and lastLame is not empty then it should fail', () => {\n    expect.assertions(2);\n    const model = new SecondClass();\n    model.firstName = '';\n    model.lastName = 'Kim';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].constraints).toEqual({ isLonger: 'firstName must be longer then lastName' });\n    });\n  });\n\n  it('if firstName is shorter then lastLame then it should fail', () => {\n    expect.assertions(2);\n    const model = new SecondClass();\n    model.firstName = 'Li';\n    model.lastName = 'Kim';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].constraints).toEqual({ isLonger: 'firstName must be longer then lastName' });\n    });\n  });\n});\n\ndescribe('decorator with separate validation constraint class', () => {\n  @ValidatorConstraint({ name: 'isShortenThan' })\n  class IsShortenThanConstraint implements ValidatorConstraintInterface {\n    validate(value: any, args: ValidationArguments): boolean {\n      const [relatedPropertyName] = args.constraints;\n      const relatedValue = (args.object as any)[relatedPropertyName];\n      if (value === null || value === undefined) return true;\n\n      return typeof value === 'string' && typeof relatedValue === 'string' && value.length < relatedValue.length;\n    }\n  }\n\n  function IsShorterThan(property: string, validationOptions?: ValidationOptions) {\n    return function (object: object, propertyName: string): void {\n      registerDecorator({\n        target: object.constructor,\n        propertyName: propertyName,\n        options: validationOptions,\n        constraints: [property],\n        validator: IsShortenThanConstraint,\n      });\n    };\n  }\n\n  class MyClass {\n    firstName: string;\n\n    @IsShorterThan('firstName', {\n      message: '$property must be shorter then $constraint1. Given value: $value',\n    })\n    lastName: string;\n  }\n\n  it('if firstName is not empty and lastLame is empty then it should succeed', () => {\n    expect.assertions(1);\n    const model = new MyClass();\n    model.firstName = 'hell no world';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(0);\n    });\n  });\n\n  it('if firstName is empty and lastLame is not empty then it should fail', () => {\n    expect.assertions(2);\n    const model = new MyClass();\n    model.firstName = '';\n    model.lastName = 'Kim';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].constraints).toEqual({\n        isShortenThan: 'lastName must be shorter then firstName. Given value: Kim',\n      });\n    });\n  });\n\n  it('if firstName is shorter then lastLame then it should fail', () => {\n    expect.assertions(2);\n    const model = new MyClass();\n    model.firstName = 'Li';\n    model.lastName = 'Kim';\n    return validator.validate(model).then(errors => {\n      expect(errors.length).toEqual(1);\n      expect(errors[0].constraints).toEqual({\n        isShortenThan: 'lastName must be shorter then firstName. Given value: Kim',\n      });\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": ["errors"]
}
