{
  "version": 3,
  "sources": ["../../../class-validator/test/utils.spec.ts"],
  "sourcesContent": ["import { convertToArray } from '../src/utils';\n\ndescribe('convertToArray', () => {\n  it('convert Set into array', () => {\n    const setExample = new Set<string>();\n    setExample.add('hello');\n    setExample.add('world');\n    const newArr = convertToArray(setExample);\n    expect(newArr).toBeInstanceOf(Array);\n    expect(newArr.length).toEqual(2);\n    expect(newArr).toContain('hello');\n    expect(newArr).toContain('world');\n  });\n\n  it('convert Map into array of values', () => {\n    const map = new Map<string, string>();\n    map.set('key1', 'hello');\n    map.set('key2', 'world');\n    const newArr = convertToArray(map);\n    expect(newArr).toBeInstanceOf(Array);\n    expect(newArr.length).toEqual(2);\n    expect(newArr).toContain('hello');\n    expect(newArr).toContain('world');\n  });\n\n  it('should return array untouched', () => {\n    const arr = ['hello', 'world'];\n    expect(arr).toBeInstanceOf(Array);\n    expect(arr.length).toEqual(2);\n    expect(arr).toContain('hello');\n    expect(arr).toContain('world');\n  });\n});\n"],
  "mappings": ";AAAA,mBAA+B;AAE/B,SAAS,kBAAkB,MAAM;AAC/B,KAAG,0BAA0B,MAAM;AACjC,UAAM,aAAa,oBAAI,IAAY;AACnC,eAAW,IAAI,OAAO;AACtB,eAAW,IAAI,OAAO;AACtB,UAAM,aAAS,6BAAe,UAAU;AACxC,WAAO,MAAM,EAAE,eAAe,KAAK;AACnC,WAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,WAAO,MAAM,EAAE,UAAU,OAAO;AAChC,WAAO,MAAM,EAAE,UAAU,OAAO;AAAA,EAClC,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,MAAM,oBAAI,IAAoB;AACpC,QAAI,IAAI,QAAQ,OAAO;AACvB,QAAI,IAAI,QAAQ,OAAO;AACvB,UAAM,aAAS,6BAAe,GAAG;AACjC,WAAO,MAAM,EAAE,eAAe,KAAK;AACnC,WAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAC/B,WAAO,MAAM,EAAE,UAAU,OAAO;AAChC,WAAO,MAAM,EAAE,UAAU,OAAO;AAAA,EAClC,CAAC;AAED,KAAG,iCAAiC,MAAM;AACxC,UAAM,MAAM,CAAC,SAAS,OAAO;AAC7B,WAAO,GAAG,EAAE,eAAe,KAAK;AAChC,WAAO,IAAI,MAAM,EAAE,QAAQ,CAAC;AAC5B,WAAO,GAAG,EAAE,UAAU,OAAO;AAC7B,WAAO,GAAG,EAAE,UAAU,OAAO;AAAA,EAC/B,CAAC;AACH,CAAC;",
  "names": []
}
