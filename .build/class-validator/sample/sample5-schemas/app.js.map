{
  "version": 3,
  "sources": ["../../../../class-validator/sample/sample5-schemas/app.ts"],
  "sourcesContent": ["import { validate, registerSchema } from '../../src/index';\nimport { Post } from './Post';\n\n// load schema. we load it a bit tricky way because we output source code into separate directory, so our json resource left in another directory\nconst postSchema = require(__dirname + '/../../../../sample/sample5-schemas/post.json');\n\n// register this schema\nregisterSchema(postSchema);\n\n// Sample1. simple validation\n\nlet post1 = new Post();\npost1.title = 'Hello world'; // should pass\npost1.text = 'this is a great post about hello world'; // should pass\npost1.rating = 10; // should pass\npost1.email = 'info@google.com'; // should pass\npost1.site = 'google.com'; // should pass\npost1.createDate = new Date(); // should pass\npost1.tags = ['abcd1', 'abcd2', 'abcd3', 'abcd4', 'abcd4']; // should pass\n\nvalidate('post', post1).then(result => {\n  console.log('1. should pass: ', result); // should pass completely, e.g. return empty array\n});\n\nlet post2 = new Post();\npost2.title = 'Hello'; // should not pass\npost2.text = 'this is a great post about hell world'; // should not pass\npost2.rating = 11; // should not pass\npost2.email = 'google.com'; // should not pass\npost2.site = 'googlecom'; // should not pass\n// should not pass because date property is missing\n\nvalidate('post', post2).then(result => {\n  console.log('2. should not pass: ', result); // should not pass completely, must return array of ValidationError-s\n});\n\n// Sample2. using validation options to skip properties that are not defined\n\nlet post3 = new Post();\npost3.title = 'Hello'; // should not pass\npost3.text = 'this is a great post about hell world'; // should not pass\npost3.rating = 11; // should not pass\npost3.email = 'google.com'; // should not pass\npost3.site = 'googlecom'; // should not pass\n\nvalidate('post', post3, { skipMissingProperties: true }).then(result => {\n  console.log('3. should not pass: ', result); // should not pass, but returned ValidationError-s should not have error about date field\n});\n\nlet post4 = new Post();\npost4.title = 'Hello world'; // should pass\npost4.text = 'this is a great post about hello world'; // should pass\npost4.rating = 10; // should pass\npost4.email = 'info@google.com'; // should pass\npost4.site = 'google.com'; // should pass\n\nvalidate('post', post4, { skipMissingProperties: true }).then(result => {\n  console.log('4. should pass: ', result); // should pass even if date is not set\n});\n\n// Sample3. using validation groups\n\nlet post5 = new Post();\npost5.title = 'Hello world'; // should pass\npost5.text = 'this is a great post about hello world'; // should pass\npost5.rating = 10; // should pass\npost5.email = 'info@google.com'; // should pass\npost5.site = 'google.com'; // should pass\n\nvalidate('post', post5, { skipMissingProperties: true }).then(result => {\n  console.log('5. should pass: ', result); // should pass even if date is not set\n});\n\n// Sample4. array validation\n\nlet post6 = new Post();\npost6.title = 'Hello world'; // should pass\npost6.text = 'this is a great post about hello world'; // should pass\npost6.rating = 10; // should pass\npost6.email = 'info@google.com'; // should pass\npost6.site = 'google.com'; // should pass\npost6.createDate = new Date(); // should pass\npost6.tags = ['abcd1', 'abcd2', 'abcd3', 'abcd4', 'abcd4'];\n\nvalidate('post', post6).then(result => {\n  console.log('6. should pass: ', result); // should pass completely, e.g. return empty array\n});\n\nlet post7 = new Post();\npost7.title = 'Hello world'; // should pass\npost7.text = 'this is a great post about hello world'; // should pass\npost7.rating = 10; // should pass\npost7.email = 'info@google.com'; // should pass\npost7.site = 'google.com'; // should pass\npost7.createDate = new Date(); // should pass\npost7.tags = ['news', 'a'];\n\nvalidate('post', post7).then(result => {\n  console.log('7. should not pass: ', result); // should not pass\n});\n\nlet post8 = new Post();\npost8.title = 'Hello world'; // should pass\npost8.text = 'this is a great post about hello world'; // should pass\npost8.rating = 10; // should pass\npost8.email = 'info@google.com'; // should pass\npost8.site = 'google.com'; // should pass\npost8.createDate = new Date(); // should pass\npost8.tags = [];\n\nvalidate('post', post8).then(result => {\n  console.log('8. should not pass: ', result); // should not pass\n});\n\nlet post9 = new Post();\npost9.title = 'Hello world'; // should pass\npost9.text = 'this is a great post about hello world'; // should pass\npost9.rating = 10; // should pass\npost9.email = 'info@google.com'; // should pass\npost9.site = 'google.com'; // should pass\npost9.createDate = new Date(); // should pass\npost9.tags = ['a', 'abcd1', 'abcd2', 'abcd3', 'abcd4', 'abcd4', 'abcd4'];\n\nvalidate('post', post9).then(result => {\n  console.log('9. should not pass: ', result); // should not pass\n});\n\nlet post10 = new Post();\npost10.title = 'Hello world'; // should pass\npost10.text = 'this is a great post about hello world'; // should pass\npost10.rating = 10; // should pass\npost10.email = 'info@google.com'; // should pass\npost10.site = 'google.com'; // should pass\npost10.createDate = new Date(); // should pass\npost10.tags = ['abcd1', 'abcd2', 'abcd3', 'abcd4', 'abcd4'];\n\nvalidate('post', post10).then(result => {\n  console.log('10. should pass: ', result); // should pass\n});\n\nlet post11 = new Post();\npost11.title = 'Hello world'; // should pass\npost11.text = 'this is a great post about hello world'; // should pass\npost11.rating = 10; // should pass\npost11.email = 'info@google.com'; // should pass\npost11.site = 'google.com'; // should pass\npost11.createDate = new Date(); // should pass\npost11.tags = null;\n\nvalidate('post', post11).then(result => {\n  console.log('11. should not pass: ', result); // should not pass\n});\n"],
  "mappings": "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",
  "names": []
}
