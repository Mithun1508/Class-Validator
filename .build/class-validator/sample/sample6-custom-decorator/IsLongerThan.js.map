{
  "version": 3,
  "sources": ["../../../../class-validator/sample/sample6-custom-decorator/IsLongerThan.ts"],
  "sourcesContent": ["import { registerDecorator } from '../../src/index';\nimport { ValidationOptions } from '../../src/decorator/ValidationOptions';\nimport { ValidatorConstraintInterface } from '../../src/validation/ValidatorConstraintInterface';\nimport { ValidatorConstraint } from '../../src/decorator/decorators';\nimport { ValidationArguments } from '../../src/validation/ValidationArguments';\n\nexport function IsLongerThan(property: string, validationOptions?: ValidationOptions) {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [property],\n      validator: IsLongerThanConstraint,\n    });\n  };\n}\n\n@ValidatorConstraint({ name: 'isLongerThan' })\nexport class IsLongerThanConstraint implements ValidatorConstraintInterface {\n  validate(value: any, args: ValidationArguments) {\n    const [relatedPropertyName] = args.constraints;\n    const relatedValue = (args.object as any)[relatedPropertyName];\n    return typeof value === 'string' && typeof relatedValue === 'string' && value.length > relatedValue.length;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkC;AAGlC,wBAAoC;AAG7B,SAAS,aAAa,UAAkB,mBAAuC;AACpF,SAAO,SAAU,QAAgB,cAAsB;AACrD,sCAAkB;AAAA,MAChB,QAAQ,OAAO;AAAA,MACf;AAAA,MACA,SAAS;AAAA,MACT,aAAa,CAAC,QAAQ;AAAA,MACtB,WAAW;AAAA,IACb,CAAC;AAAA,EACH;AACF;AAGO,IAAM,yBAAN,MAAqE;AAAA,EAC1E,SAAS,OAAY,MAA2B;AAC9C,UAAM,CAAC,mBAAmB,IAAI,KAAK;AACnC,UAAM,eAAgB,KAAK,OAAe;AAC1C,WAAO,OAAO,UAAU,YAAY,OAAO,iBAAiB,YAAY,MAAM,SAAS,aAAa;AAAA,EACtG;AACF;AANa,yBAAN;AAAA,MADN,uCAAoB,EAAE,MAAM,eAAe,CAAC;AAAA,GAChC;",
  "names": []
}
